{"version":3,"file":"index.cjs","sources":["../src/errors/base.ts","../src/errors/driver.ts","../src/errors/options.ts","../src/query/utils/alias.ts","../src/query/utils/key.ts","../src/utils/code-transformation/constants.ts","../src/utils/code-transformation/module.ts","../src/utils/entity.ts","../src/utils/separator.ts","../src/utils/slash.ts","../src/utils/tsconfig/module.ts","../src/utils/file-path.ts","../src/utils/file-system.ts","../src/utils/has-property.ts","../src/utils/promise.ts","../src/query/utils/option.ts","../src/query/parameter/fields/module.ts","../src/query/parameter/filters/module.ts","../src/query/parameter/pagination/module.ts","../src/query/parameter/relations/module.ts","../src/query/parameter/sort/module.ts","../src/query/module.ts","../src/data-source/find/module.ts","../src/env/constants.ts","../src/env/utils.ts","../src/env/module.ts","../src/data-source/options/utils/merge.ts","../src/data-source/options/utils/env.ts","../src/data-source/options/module.ts","../src/data-source/options/singleton.ts","../src/data-source/singleton.ts","../src/database/check.ts","../src/database/driver/utils/charset.ts","../src/database/driver/utils/character-set.ts","../src/database/driver/utils/build.ts","../src/database/driver/utils/create.ts","../src/database/utils/context.ts","../src/database/utils/migration.ts","../src/database/utils/query.ts","../src/database/utils/schema.ts","../src/database/driver/postgres.ts","../src/database/driver/cockroachdb.ts","../src/database/driver/mongodb.ts","../src/database/driver/mssql.ts","../src/database/driver/mysql.ts","../src/database/driver/oracle.ts","../src/database/driver/sqlite.ts","../src/database/create.ts","../src/database/drop.ts","../src/cli/commands/database/create.ts","../src/cli/commands/database/drop.ts","../src/seeder/entity.ts","../src/seeder/factory/module.ts","../src/seeder/factory/manager.ts","../src/seeder/utils/file-path.ts","../src/seeder/utils/prepare.ts","../src/seeder/utils/template.ts","../src/seeder/factory/utils.ts","../src/seeder/executor.ts","../src/seeder/module.ts","../src/cli/commands/seed/create.ts","../src/cli/commands/seed/run.ts"],"sourcesContent":["export class TypeormExtensionError extends Error {\n\n}\n","import { TypeormExtensionError } from './base';\n\nexport class DriverError extends TypeormExtensionError {\n    constructor(message?: string) {\n        super(message || 'A database driver related error has occurred.');\n    }\n\n    static undeterminable() {\n        return new DriverError('The driver could not be determined.');\n    }\n\n    static notSupported(driverName: string) {\n        return new DriverError(`The driver ${driverName} is not supported yet.`);\n    }\n}\n","import { TypeormExtensionError } from './base';\n\nexport class OptionsError extends TypeormExtensionError {\n    constructor(message?: string) {\n        super(message || 'A database options related error has occurred');\n    }\n\n    static undeterminable() {\n        return new OptionsError('The database options could not be determined.');\n    }\n\n    static notFound() {\n        return new OptionsError('The database options could not be located/loaded.');\n    }\n\n    static databaseNotDefined() {\n        return new OptionsError('The database name to connect to is not defined.');\n    }\n}\n","import type { QueryRelationsApplyOutput } from '../parameter';\n\nexport function getAliasForPath(items?: QueryRelationsApplyOutput, path?: string) {\n    if (typeof path === 'undefined' || typeof items === 'undefined') {\n        return undefined;\n    }\n\n    for (let i = 0; i < items.length; i++) {\n        if (items[i].key === path) {\n            return items[i].value;\n        }\n    }\n\n    return undefined;\n}\n","export function buildKeyWithPrefix(name: string, prefix?: string) {\n    if (prefix) {\n        return `${prefix}.${name}`;\n    }\n\n    return name;\n}\n","export enum CodeTransformation {\n    JUST_IN_TIME = 'jit',\n    NONE = 'none',\n}\n","import process from 'node:process';\nimport { CodeTransformation } from './constants';\n\nexport function detectCodeTransformation() : `${CodeTransformation}` {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (process[Symbol.for('ts-node.register.instance')]) {\n        return CodeTransformation.JUST_IN_TIME;\n    }\n\n    return CodeTransformation.NONE;\n}\n\nexport function isCodeTransformation(input: string) {\n    return detectCodeTransformation() === input;\n}\n","import type { EntitySchema, ObjectType } from 'typeorm';\nimport { InstanceChecker } from 'typeorm';\n\nexport function getEntityName<O>(entity: ObjectType<O> | EntitySchema<O>) : string {\n    if (typeof entity === 'function') {\n        return entity.name;\n    }\n\n    if (InstanceChecker.isEntitySchema(entity)) {\n        return entity.options.name;\n    }\n\n    return new (entity as any)().constructor.name;\n}\n","export function canReplaceWindowsSeparator(input: string) : boolean {\n    // https://superuser.com/questions/176388/why-does-windows-use-backslashes-for-paths-and-unix-forward-slashes/176395#176395\n    if (input.startsWith('\\\\\\\\?\\\\')) {\n        return false;\n    }\n\n    let characterIndex: number;\n\n    const specialCharacters = ['[', '{', '(', '^', '$', '.', '|', '?', '*', '+'];\n    for (let i = 0; i < specialCharacters.length; i++) {\n        characterIndex = input.indexOf(specialCharacters[i]);\n        if (characterIndex !== -1) {\n            // special character is prefixed with \\, no transformation allowed\n            if (characterIndex !== 0 && input[characterIndex - 1] === '\\\\') {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport function replaceWindowSeparator(input: string) {\n    return input.replace(/\\\\/g, '/');\n}\n\nexport function safeReplaceWindowsSeparator(input: string): string {\n    if (input.indexOf('\\\\') === -1 || !canReplaceWindowsSeparator(input)) {\n        return input;\n    }\n\n    return replaceWindowSeparator(input);\n}\n","const TRAILING_SLASH_RE = /\\/$|\\/\\?/;\n\nexport function hasTrailingSlash(input = '', queryParams = false): boolean {\n    if (!queryParams) {\n        return input.endsWith('/');\n    }\n\n    return TRAILING_SLASH_RE.test(input);\n}\n\nexport function withoutTrailingSlash(input = '', queryParams = false): string {\n    if (!queryParams) {\n        return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || '/';\n    }\n\n    if (!hasTrailingSlash(input, true)) {\n        return input || '/';\n    }\n\n    const [s0, ...s] = input.split('?');\n\n    return (s0.slice(0, -1) || '/') + (s.length ? `?${s.join('?')}` : '');\n}\n","import { isObject, load } from 'locter';\nimport path from 'node:path';\nimport type { TSConfig } from './type';\n\nexport async function readTSConfig(input?: string) : Promise<TSConfig> {\n    input = input || process.cwd();\n    input = path.isAbsolute(input) ?\n        input :\n        path.resolve(process.cwd(), input);\n\n    const filePath = input.indexOf('.json') === -1 ?\n        path.join(input, 'tsconfig.json') :\n        input;\n\n    try {\n        const tsConfig = await load(filePath);\n\n        if (isObject(tsConfig)) {\n            return tsConfig;\n        }\n    } catch (e) {\n        // don't do anything ;)\n    }\n\n    return {};\n}\n","import { isObject } from 'locter';\nimport path from 'node:path';\nimport { CodeTransformation, isCodeTransformation } from './code-transformation';\nimport { canReplaceWindowsSeparator, replaceWindowSeparator } from './separator';\nimport { withoutTrailingSlash } from './slash';\nimport type { TSConfig } from './tsconfig';\nimport { readTSConfig } from './tsconfig';\n\nconst stripLeadingModifier = (text: string) => {\n    if (text.startsWith('./')) {\n        text = text.substring(2);\n    }\n\n    return text;\n};\n\nexport function transformFilePath(\n    input: string,\n    dist?: string,\n    src?: string,\n): string {\n    let separator = path.sep;\n    const windowsSeparatorReplaceable = canReplaceWindowsSeparator(input);\n    if (windowsSeparatorReplaceable) {\n        separator = '/';\n        input = replaceWindowSeparator(input);\n    }\n\n    let base = input;\n    let baseIndex = input.lastIndexOf(separator);\n    if (baseIndex !== -1) {\n        base = base.substring(baseIndex + 1);\n    }\n\n    if (src) {\n        if (windowsSeparatorReplaceable) {\n            src = replaceWindowSeparator(src);\n        }\n\n        src = withoutTrailingSlash(stripLeadingModifier(src));\n    }\n    src = src || 'src';\n\n    if (dist) {\n        if (windowsSeparatorReplaceable) {\n            dist = replaceWindowSeparator(dist);\n        }\n\n        dist = withoutTrailingSlash(stripLeadingModifier(dist));\n    }\n    dist = dist || 'dist';\n\n    if (\n        input.indexOf(src) !== -1 &&\n        input.indexOf(dist) === -1\n    ) {\n        const lastIndex = input.lastIndexOf(src);\n        const prevCharacter = input.substring(lastIndex - 1, lastIndex);\n        if (!prevCharacter || prevCharacter === separator) {\n            input = input.substring(0, lastIndex) +\n                dist +\n                input.substring(lastIndex + src.length);\n\n            baseIndex = input.lastIndexOf(separator);\n        }\n    }\n\n    // if the path already contains a js file extension, we are done\n    const jsExtensions = ['js', 'cjs', 'mjs'];\n    for (let i = 0; i < jsExtensions.length; i++) {\n        if (base.indexOf(jsExtensions[i]) !== -1) {\n            return input;\n        }\n    }\n\n    const tsExtensions = ['ts', 'cts', 'mts'];\n    for (let i = 0; i < tsExtensions.length; i++) {\n        const regex = new RegExp(`(\\\\.${tsExtensions[i]}|${tsExtensions[i]})`, 'g');\n        let matchesSum: number | undefined;\n        const matches = base.match(regex);\n        if (Array.isArray(matches)) {\n            matchesSum = matches.length;\n        }\n\n        let matchesCounter = 0;\n\n        const bracketIndex = base.lastIndexOf('{');\n        base = base.replace(\n            regex,\n            (...args) => {\n                matchesCounter++;\n\n                // if the file extension name comes after the last bracket index,\n                // we can be pretty sure that the extension name is not part of a filename\n                if (\n                    (args[2] >= bracketIndex && bracketIndex !== -1) ||\n                    (bracketIndex === -1 && matchesCounter === matchesSum)\n                ) {\n                    return args[0].startsWith('.') ? `.${jsExtensions[i]}` : jsExtensions[i];\n                }\n\n                return args[0];\n            },\n        );\n    }\n\n    if (baseIndex !== -1) {\n        base = input.substring(0, baseIndex + 1) + base;\n    }\n\n    return stripLeadingModifier(base);\n}\nexport async function adjustFilePath<T extends unknown | unknown[]>(\n    input: T,\n    tsconfig?: string | TSConfig,\n): Promise<T> {\n    if (isCodeTransformation(CodeTransformation.JUST_IN_TIME)) {\n        return input;\n    }\n\n    if (!isObject(tsconfig)) {\n        tsconfig = await readTSConfig(tsconfig);\n    }\n\n    const { compilerOptions } = tsconfig;\n\n    if (typeof input === 'string') {\n        return transformFilePath(input, compilerOptions?.outDir) as T;\n    }\n\n    if (Array.isArray(input)) {\n        for (let i = 0; i < input.length; i++) {\n            if (typeof input[i] === 'string') {\n                input[i] = transformFilePath(input[i], compilerOptions?.outDir);\n            }\n        }\n    }\n\n    return input;\n}\n\nexport async function adjustFilePaths<T extends Record<string, any>>(\n    input: T,\n    keys?: (keyof T)[],\n    tsconfig?: string | TSConfig,\n): Promise<T> {\n    if (isCodeTransformation(CodeTransformation.JUST_IN_TIME)) {\n        return input;\n    }\n\n    if (!isObject(tsconfig)) {\n        tsconfig = await readTSConfig(tsconfig);\n    }\n\n    keys = keys || Object.keys(input);\n\n    for (let i = 0; i < keys.length; i++) {\n        input[keys[i]] = await adjustFilePath(input[keys[i]], tsconfig);\n    }\n\n    return input;\n}\n\nexport function resolveFilePath(filePath: string, root?: string) {\n    if (path.isAbsolute(filePath)) {\n        return filePath;\n    }\n\n    return filePath.startsWith('/') ?\n        filePath :\n        path.resolve(root || process.cwd(), filePath);\n}\n\nexport function parseFilePath(filePath: string, root?: string) {\n    const fullPath = resolveFilePath(filePath, root);\n\n    const directory = path.dirname(fullPath);\n    const name = path.basename(fullPath);\n\n    return {\n        directory,\n        name,\n    };\n}\n","import fs from 'node:fs';\n\nexport async function isDirectory(input: string) : Promise<boolean> {\n    try {\n        const stat = await fs.promises.stat(input);\n        return stat.isDirectory();\n    } catch (e) {\n        return false;\n    }\n}\n","export function hasOwnProperty<X extends Record<string, any>, Y extends PropertyKey>(obj: X, prop: Y): obj is X & Record<Y, unknown> {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport function hasStringProperty<X extends Record<string, any>, Y extends PropertyKey>(obj: X, prop: Y): obj is X & Record<Y, string> {\n    return hasOwnProperty(obj, prop) &&\n        typeof obj[prop] === 'string';\n}\n","import { isObject } from 'locter';\n\nexport function isPromise(p: unknown): p is Promise<unknown> {\n    return isObject(p) &&\n        (\n            p instanceof Promise ||\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            typeof p.then === 'function'\n        );\n}\n","import { hasOwnProperty } from '../../utils';\n\nexport function isQueryOptionDefined(\n    input: Record<string, any> | boolean,\n    option: string | string[],\n) {\n    if (typeof input === 'boolean') {\n        return false;\n    }\n\n    const options = Array.isArray(option) ? option : [option];\n\n    for (let i = 0; i < options.length; i++) {\n        if (hasOwnProperty(input, options[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n","import {\n    parseQueryFields,\n} from 'rapiq';\n\nimport type { ObjectLiteral, SelectQueryBuilder } from 'typeorm';\nimport { buildKeyWithPrefix, getAliasForPath } from '../../utils';\nimport type { QueryFieldsApplyOptions, QueryFieldsApplyOutput } from './type';\n\n/**\n * Apply parsed fields parameter data on the db query.\n *\n * @param query\n * @param data\n */\n/* istanbul ignore next */\nexport function applyQueryFieldsParseOutput<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: QueryFieldsApplyOutput,\n    options: QueryFieldsApplyOptions<T> = {},\n) {\n    if (data.length === 0) {\n        return data;\n    }\n\n    query.select(data.map((field) => {\n        const alias = getAliasForPath(options.relations, field.path) ||\n            options.defaultAlias ||\n            options.defaultPath;\n\n        return buildKeyWithPrefix(field.key, alias);\n    }));\n\n    return data;\n}\n\n/**\n * Apply raw fields parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyQueryFields<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QueryFieldsApplyOptions<T>,\n) : QueryFieldsApplyOutput {\n    options = options || {};\n    if (options.defaultAlias) {\n        options.defaultPath = options.defaultAlias;\n    }\n\n    return applyQueryFieldsParseOutput(query, parseQueryFields(data, options), options);\n}\n\n/**\n * Apply raw fields parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyFields<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QueryFieldsApplyOptions<T>,\n) : QueryFieldsApplyOutput {\n    return applyQueryFields(query, data, options);\n}\n","import type { FiltersParseOutput } from 'rapiq';\nimport { FilterComparisonOperator, parseQueryFilters } from 'rapiq';\n\nimport type { ObjectLiteral, SelectQueryBuilder } from 'typeorm';\nimport { Brackets } from 'typeorm';\nimport { buildKeyWithPrefix, getAliasForPath } from '../../utils';\nimport type {\n    QueryFiltersApplyOptions,\n    QueryFiltersApplyOutput,\n    QueryFiltersOutput,\n} from './type';\n\n// --------------------------------------------------\n\nexport function transformParsedFilters<T extends ObjectLiteral = ObjectLiteral>(\n    data: FiltersParseOutput,\n    options: QueryFiltersApplyOptions<T> = {},\n) : QueryFiltersOutput {\n    options = options || {};\n\n    const items : QueryFiltersOutput = [];\n\n    for (let i = 0; i < data.length; i++) {\n        const alias = getAliasForPath(options.relations, data[i].path) ||\n            options.defaultAlias ||\n            options.defaultPath;\n\n        const fullKey : string = buildKeyWithPrefix(data[i].key, alias);\n\n        const filter = data[i];\n\n        const statement : string[] = [\n            fullKey,\n        ];\n\n        let bindingKey : string | undefined = typeof options.bindingKey === 'function' ?\n            options.bindingKey(fullKey) :\n            undefined;\n\n        if (typeof bindingKey === 'undefined') {\n            bindingKey = `filter_${fullKey.replace('.', '_')}`;\n        }\n\n        if (filter.value === null || typeof filter.value === 'undefined') {\n            statement.push('IS');\n\n            if (filter.operator === FilterComparisonOperator.NOT_EQUAL) {\n                statement.push('NOT');\n            }\n\n            statement.push('NULL');\n\n            items.push({\n                statement: statement.join(' '),\n                binding: {},\n            });\n\n            continue;\n        }\n\n        switch (filter.operator) {\n            case FilterComparisonOperator.EQUAL:\n            case FilterComparisonOperator.NOT_EQUAL: {\n                if (filter.operator === FilterComparisonOperator.EQUAL) {\n                    statement.push('=');\n                } else {\n                    statement.push('!=');\n                }\n\n                statement.push(`:${bindingKey}`);\n                break;\n            }\n            case FilterComparisonOperator.LIKE:\n            case FilterComparisonOperator.NOT_LIKE: {\n                if (filter.operator === FilterComparisonOperator.NOT_LIKE) {\n                    statement.push('NOT');\n                }\n\n                statement.push('LIKE');\n\n                statement.push(`:${bindingKey}`);\n\n                filter.value += '%';\n                break;\n            }\n\n            case FilterComparisonOperator.IN:\n            case FilterComparisonOperator.NOT_IN: {\n                if (filter.operator === FilterComparisonOperator.NOT_IN) {\n                    statement.push('NOT');\n                }\n\n                statement.push('IN');\n\n                statement.push(`(:...${bindingKey})`);\n\n                if (Array.isArray(filter.value)) {\n                    const nullIndex = (filter.value as unknown[]).indexOf(null);\n                    if (nullIndex !== -1) {\n                        filter.value.splice(nullIndex, 1);\n\n                        statement.unshift('(');\n                        if (filter.operator === FilterComparisonOperator.NOT_IN) {\n                            statement.push('AND');\n                        } else {\n                            statement.push('OR');\n                        }\n                        statement.push(fullKey);\n                        statement.push('IS');\n\n                        if (filter.operator === FilterComparisonOperator.NOT_IN) {\n                            statement.push('NOT');\n                        }\n\n                        statement.push('NULL');\n                        statement.push(')');\n                    }\n                }\n                break;\n            }\n            case FilterComparisonOperator.LESS_THAN:\n            case FilterComparisonOperator.LESS_THAN_EQUAL:\n            case FilterComparisonOperator.GREATER_THAN:\n            case FilterComparisonOperator.GREATER_THAN_EQUAL: {\n                if (filter.operator === FilterComparisonOperator.LESS_THAN) {\n                    statement.push('<');\n                } else if (filter.operator === FilterComparisonOperator.LESS_THAN_EQUAL) {\n                    statement.push('<=');\n                } else if (filter.operator === FilterComparisonOperator.GREATER_THAN) {\n                    statement.push('>');\n                } else {\n                    statement.push('>=');\n                }\n\n                statement.push(`:${bindingKey}`);\n                break;\n            }\n        }\n\n        items.push({\n            statement: statement.join(' '),\n            binding: { [bindingKey]: filter.value },\n        });\n    }\n\n    return items;\n}\n\n/**\n * Apply transformed filter[s] parameter data on the db query.\n *\n * @param query\n * @param data\n */\nexport function applyFiltersTransformed<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: QueryFiltersOutput,\n) : QueryFiltersOutput {\n    if (data.length === 0) {\n        return data;\n    }\n\n    /* istanbul ignore next */\n    query.andWhere(new Brackets((qb) => {\n        for (let i = 0; i < data.length; i++) {\n            if (i === 0) {\n                qb.where(data[i].statement, data[i].binding);\n            } else {\n                qb.andWhere(data[i].statement, data[i].binding);\n            }\n        }\n    }));\n\n    return data;\n}\n\n/**\n * Apply parsed filter[s] parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyQueryFiltersParseOutput<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: FiltersParseOutput,\n    options?: QueryFiltersApplyOptions<T>,\n) : QueryFiltersApplyOutput {\n    applyFiltersTransformed(query, transformParsedFilters<T>(data, options));\n\n    return data;\n}\n\n// --------------------------------------------------\n\n/**\n * Apply raw filter[s] parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyQueryFilters<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QueryFiltersApplyOptions<T>,\n) : QueryFiltersApplyOutput {\n    options = options || {};\n    if (options.defaultAlias) {\n        options.defaultPath = options.defaultAlias;\n    }\n\n    return applyQueryFiltersParseOutput(\n        query,\n        parseQueryFilters(data, options),\n        options,\n    );\n}\n\n/**\n * Apply raw filter[s] parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyFilters<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QueryFiltersApplyOptions<T>,\n) : QueryFiltersApplyOutput {\n    return applyQueryFilters(query, data, options);\n}\n","import type { ObjectLiteral } from 'rapiq';\nimport { parseQueryPagination } from 'rapiq';\nimport type { SelectQueryBuilder } from 'typeorm';\nimport type { QueryPaginationApplyOptions, QueryPaginationApplyOutput } from './type';\n\n/**\n * Apply parsed page/pagination parameter data on the db query.\n *\n * @param query\n * @param data\n */\nexport function applyQueryPaginationParseOutput<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: QueryPaginationApplyOutput,\n) {\n    /* istanbul ignore next */\n    if (typeof data.limit !== 'undefined') {\n        query.take(data.limit);\n\n        if (typeof data.offset === 'undefined') {\n            query.skip(0);\n        }\n    }\n\n    /* istanbul ignore next */\n    if (typeof data.offset !== 'undefined') {\n        query.skip(data.offset);\n    }\n\n    return data;\n}\n\n/**\n * Apply raw page/pagination parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyQueryPagination<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QueryPaginationApplyOptions,\n) : QueryPaginationApplyOutput {\n    return applyQueryPaginationParseOutput(query, parseQueryPagination(data, options));\n}\n\n/**\n * Apply raw page/pagination parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyPagination<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QueryPaginationApplyOptions,\n) : QueryPaginationApplyOutput {\n    return applyQueryPagination(query, data, options);\n}\n","import type { RelationsParseOutput } from 'rapiq';\nimport { parseQueryRelations } from 'rapiq';\nimport type { ObjectLiteral, SelectQueryBuilder } from 'typeorm';\nimport { buildKeyWithPrefix } from '../../utils';\nimport type { QueryRelationsApplyOptions, QueryRelationsApplyOutput } from './type';\n\n/**\n * Apply parsed include/relation parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyQueryRelationsParseOutput<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: RelationsParseOutput,\n    options?: QueryRelationsApplyOptions<T>,\n) : QueryRelationsApplyOutput {\n    options = options || {};\n    for (let i = 0; i < data.length; i++) {\n        const parts = data[i].key.split('.');\n\n        let key : string;\n        if (parts.length > 1) {\n            key = parts.slice(-2).join('.');\n        } else {\n            key = buildKeyWithPrefix(data[i].key, options.defaultAlias);\n        }\n\n        data[i].key = key;\n\n        /* istanbul ignore next */\n        query.leftJoinAndSelect(key, data[i].value);\n    }\n\n    return data;\n}\n\n/**\n * Apply raw include/relations parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyQueryRelations<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QueryRelationsApplyOptions<T>,\n) : QueryRelationsApplyOutput {\n    return applyQueryRelationsParseOutput(query, parseQueryRelations(data, options), options);\n}\n\n/**\n * Apply raw include/relations parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyRelations<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QueryRelationsApplyOptions<T>,\n) : QueryRelationsApplyOutput {\n    return applyQueryRelations(query, data, options);\n}\n","import type { SortDirection, SortParseOutput } from 'rapiq';\nimport { parseQuerySort } from 'rapiq';\nimport type { ObjectLiteral, SelectQueryBuilder } from 'typeorm';\nimport { buildKeyWithPrefix } from '../../utils';\nimport type { QuerySortApplyOptions, QuerySortApplyOutput } from './type';\n\n// --------------------------------------------------\n\n/**\n * Apply parsed sort parameter data on the db query.\n *\n * @param query\n * @param data\n */\nexport function applyQuerySortParseOutput<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: SortParseOutput,\n) : QuerySortApplyOutput {\n    if (data.length === 0) {\n        return data;\n    }\n\n    const sort : Record<string, `${SortDirection}`> = {};\n\n    for (let i = 0; i < data.length; i++) {\n        const key = buildKeyWithPrefix(data[i].key, data[i].path);\n\n        sort[key] = data[i].value;\n    }\n\n    query.orderBy(sort);\n\n    return data;\n}\n\n/**\n * Apply raw sort parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applyQuerySort<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QuerySortApplyOptions<T>,\n) : SortParseOutput {\n    options = options || {};\n    if (options.defaultAlias) {\n        options.defaultPath = options.defaultAlias;\n    }\n\n    return applyQuerySortParseOutput(query, parseQuerySort(data, options));\n}\n\n/**\n * Apply raw sort parameter data on the db query.\n *\n * @param query\n * @param data\n * @param options\n */\nexport function applySort<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    data: unknown,\n    options?: QuerySortApplyOptions<T>,\n) : SortParseOutput {\n    return applyQuerySort(query, data, options);\n}\n","import type { ParseInput, ParseOutput } from 'rapiq';\nimport { parseQuery } from 'rapiq';\nimport type { ObjectLiteral, SelectQueryBuilder } from 'typeorm';\nimport {\n    applyQueryFieldsParseOutput,\n    applyQueryFiltersParseOutput,\n    applyQueryPaginationParseOutput,\n    applyQueryRelationsParseOutput,\n    applyQuerySortParseOutput,\n} from './parameter';\nimport type { QueryApplyOptions, QueryApplyOutput } from './type';\nimport { isQueryOptionDefined } from './utils';\n\nexport function applyQueryParseOutput<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    context: ParseOutput,\n): ParseOutput {\n    if (context.fields) {\n        applyQueryFieldsParseOutput(query, context.fields, {\n            defaultAlias: context.defaultPath,\n            relations: context.relations,\n        });\n    }\n\n    if (context.filters) {\n        applyQueryFiltersParseOutput(query, context.filters, {\n            defaultAlias: context.defaultPath,\n            relations: context.relations,\n        });\n    }\n\n    if (context.pagination) {\n        applyQueryPaginationParseOutput(query, context.pagination);\n    }\n\n    if (context.relations) {\n        applyQueryRelationsParseOutput(query, context.relations, {\n            defaultAlias: context.defaultPath,\n        });\n    }\n\n    if (context.sort) {\n        applyQuerySortParseOutput(query, context.sort);\n    }\n\n    return context;\n}\n\nexport function applyQuery<T extends ObjectLiteral = ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    input: ParseInput,\n    options?: QueryApplyOptions<T>,\n) : QueryApplyOutput {\n    options = options || {};\n\n    if (options.defaultAlias) {\n        options.defaultPath = options.defaultAlias;\n    }\n\n    if (\n        typeof options.fields === 'undefined' ||\n        !isQueryOptionDefined(options.fields, ['allowed', 'default'])\n    ) {\n        options.fields = false;\n    }\n\n    if (\n        typeof options.filters === 'undefined' ||\n        !isQueryOptionDefined(options.filters, ['allowed', 'default'])\n    ) {\n        options.filters = false;\n    }\n\n    if (\n        typeof options.pagination === 'undefined'\n    ) {\n        options.pagination = false;\n    }\n\n    if (\n        typeof options.relations === 'undefined' ||\n        !isQueryOptionDefined(options.relations, ['allowed'])\n    ) {\n        options.relations = false;\n    }\n\n    if (\n        typeof options.sort === 'undefined' ||\n        !isQueryOptionDefined(options.sort, ['allowed', 'default'])\n    ) {\n        options.sort = false;\n    }\n\n    const output = applyQueryParseOutput(query, parseQuery(input, options));\n\n    return {\n        ...output,\n        ...(options.defaultAlias ? { defaultAlias: options.defaultAlias } : {}),\n    };\n}\n","import {\n    isObject,\n    load,\n    locate,\n    removeFileNameExtension,\n} from 'locter';\nimport path from 'node:path';\nimport type { DataSource } from 'typeorm';\nimport { InstanceChecker } from 'typeorm';\nimport {\n    adjustFilePath,\n    isPromise,\n    readTSConfig,\n    safeReplaceWindowsSeparator,\n} from '../../utils';\nimport type { DataSourceFindOptions } from './type';\nimport type { TSConfig } from '../../utils';\n\nexport async function findDataSource(\n    context: DataSourceFindOptions = {},\n) : Promise<DataSource | undefined> {\n    let tsconfig : TSConfig | undefined;\n    if (!context.preserveFilePaths) {\n        if (isObject(context.tsconfig)) {\n            tsconfig = context.tsconfig;\n        } else {\n            tsconfig = await readTSConfig(context.tsconfig);\n        }\n    }\n\n    const files : string[] = [\n        'data-source',\n    ];\n\n    if (context.fileName) {\n        context.fileName = removeFileNameExtension(\n            context.fileName,\n            ['.ts', '.mts', '.cts', '.js', '.mjs', '.cjs'],\n        );\n\n        if (context.fileName !== 'data-source') {\n            files.unshift(context.fileName);\n        }\n    }\n\n    let { directory } = context;\n    let directoryIsPattern = false;\n    if (context.directory) {\n        if (path.isAbsolute(context.directory)) {\n            directory = context.directory;\n        } else {\n            directoryIsPattern = true;\n            directory = safeReplaceWindowsSeparator(context.directory);\n        }\n\n        if (!context.preserveFilePaths) {\n            directory = await adjustFilePath(directory, tsconfig);\n        }\n    }\n\n    const lookupPaths = [];\n    for (let j = 0; j < files.length; j++) {\n        if (\n            directory &&\n            directoryIsPattern\n        ) {\n            lookupPaths.push(path.posix.join(directory, files[j]));\n        }\n\n        lookupPaths.push(...[\n            path.posix.join('src', files[j]),\n            path.posix.join('src/{db,database}', files[j]),\n        ]);\n    }\n\n    files.push(...lookupPaths);\n\n    if (!context.preserveFilePaths) {\n        for (let j = 0; j < files.length; j++) {\n            files[j] = await adjustFilePath(files[j], tsconfig);\n        }\n    }\n\n    for (let i = 0; i < files.length; i++) {\n        const info = await locate(\n            `${files[i]}.{js,cjs,mjs,ts,cts,mts}`,\n            {\n                path: [\n                    process.cwd(),\n                    ...(directory && !directoryIsPattern ? [directory] : []),\n                ],\n                ignore: ['**/*.d.ts'],\n            },\n        );\n\n        if (info) {\n            let moduleRecord = await load(info);\n\n            if (isPromise(moduleRecord)) {\n                moduleRecord = await moduleRecord;\n            }\n\n            if (InstanceChecker.isDataSource(moduleRecord)) {\n                return moduleRecord;\n            }\n\n            if (!isObject(moduleRecord)) {\n                continue;\n            }\n\n            const keys = Object.keys(moduleRecord);\n            for (let j = 0; j < keys.length; j++) {\n                let value = moduleRecord[keys[j]];\n\n                if (isPromise(value)) {\n                    value = await value;\n                }\n\n                if (InstanceChecker.isDataSource(value)) {\n                    return value;\n                }\n            }\n        }\n    }\n\n    return undefined;\n}\n","/*\n * Copyright (c) 2023-2023.\n * Author Peter Placzek (tada5hi)\n * For the full copyright and license information,\n * view the LICENSE file that was distributed with this source code.\n */\n\nexport enum EnvironmentName {\n    DEVELOPMENT = 'development',\n    PRODUCTION = 'production',\n    TEST = 'test',\n}\n\nexport enum EnvironmentVariableName {\n    ENV = 'NODE_ENV',\n\n    // Seeder\n    SEEDS = 'DB_SEEDS',\n    SEEDS_ALT = 'TYPEORM_SEEDING_SEEDS',\n\n    FACTORIES = 'DB_FACTORIES',\n    FACTORIES_ALT = 'TYPEORM_SEEDING_FACTORIES',\n\n    // Database\n    TYPE = 'DB_TYPE',\n    TYPE_ALT = 'TYPEORM_CONNECTION',\n\n    URL = 'DB_URL',\n    URL_ALT = 'TYPEORM_URL',\n\n    HOST = 'DB_HOST',\n    HOST_ALT = 'TYPEORM_HOST',\n\n    PORT = 'DB_PORT',\n    PORT_ALT = 'TYPEORM_PORT',\n\n    USERNAME = 'DB_USERNAME',\n    USERNAME_ALT = 'TYPEORM_USERNAME',\n\n    PASSWORD = 'DB_PASSWORD',\n    PASSWORD_ALT = 'TYPEORM_PASSWORD',\n\n    DATABASE = 'DB_DATABASE',\n    DATABASE_ALT = 'TYPEORM_DATABASE',\n\n    SID = 'DB_SID',\n    SID_ALT = 'TYPEORM_SID',\n\n    SCHEMA = 'DB_SCHEMA',\n    SCHEMA_ALT = 'TYPEORM_SCHEMA',\n\n    SCHEMA_DROP = 'DB_DROP_SCHEMA',\n    SCHEMA_DROP_ALT = 'TYPEORM_DROP_SCHEMA',\n\n    DRIVER_EXTRA = 'DB_DRIVER_EXTRA',\n    DRIVER_EXTRA_ALT = 'TYPEORM_DRIVER_EXTRA',\n\n    SYNCHRONIZE = 'DB_SYNCHRONIZE',\n    SYNCHRONIZE_ALT = 'TYPEORM_SYNCHRONIZE',\n\n    MIGRATIONS = 'DB_MIGRATIONS',\n    MIGRATIONS_ALT = 'TYPEORM_MIGRATIONS',\n\n    MIGRATIONS_RUN = 'DB_MIGRATIONS_RUN',\n    MIGRATIONS_RUN_ALT = 'TYPEORM_MIGRATIONS_RUN',\n\n    MIGRATIONS_TABLE_NAME = 'DB_MIGRATIONS_TABLE_NAME',\n    MIGRATIONS_TABLE_NAME_ALT = 'TYPEORM_MIGRATIONS_TABLE_NAME',\n\n    ENTITIES = 'DB_ENTITIES',\n    ENTITIES_ALT = 'TYPEORM_ENTITIES',\n\n    ENTITY_PREFIX = 'DB_ENTITY_PREFIX',\n    ENTITY_PREFIX_ALT = 'TYPEORM_ENTITY_PREFIX',\n\n    METADATA_TABLE_NAME = 'DB_METADATA_TABLE_NAME',\n    METADATA_TABLE_NAME_ALT = 'TYPEORM_METADATA_TABLE_NAME',\n\n    SUBSCRIBERS = 'DB_SUBSCRIBERS',\n    SUBSCRIBERS_ALT = 'TYPEORM_SUBSCRIBERS',\n\n    LOGGING = 'DB_LOGGING',\n    LOGGING_ALT = 'TYPEORM_LOGGING',\n\n    LOGGER = 'DB_LOGGER',\n    LOGGER_ALT = 'TYPEORM_LOGGER',\n\n    MAX_QUERY_EXECUTION_TIME = 'DB_MAX_QUERY_EXECUTION_TIME',\n    MAX_QUERY_EXECUTION_TIME_ALT = 'TYPEORM_MAX_QUERY_EXECUTION_TIME',\n\n    DEBUG = 'DB_DEBUG',\n    DEBUG_ALT = 'TYPEORM_DEBUG',\n\n    UUID_EXTENSION = 'DB_UUID_EXTENSION',\n    UUID_EXTENSION_ALT = 'TYPEORM_UUID_EXTENSION',\n\n    CACHE = 'DB_CACHE',\n    CACHE_ALT = 'TYPEORM_CACHE',\n\n    CACHE_ALWAYS_ENABLED = 'DB_CACHE_ALWAYS_ENABLED',\n    CACHE_ALWAYS_ENABLED_ALT = 'TYPEORM_CACHE_ALWAYS_ENABLED',\n\n    CACHE_OPTIONS = 'DB_CACHE_OPTIONS',\n    CACHE_OPTIONS_ALT = 'TYPEORM_CACHE_OPTIONS',\n\n    CACHE_DURATION = 'DB_CACHE_DURATION',\n    CACHE_DURATION_ALT = 'TYPEORM_CACHE_DURATION',\n}\n","import {\n    oneOf, read, readBool, readInt, toArray, toBool,\n} from 'envix';\nimport type { DataSourceCacheOption } from '../data-source';\nimport { EnvironmentVariableName } from './constants';\n\nexport function transformLogging(input?: string) : boolean | string | string[] {\n    const value = toBool(input);\n    if (typeof value === 'boolean') {\n        return value;\n    }\n\n    if (input === 'all') {\n        return 'all';\n    }\n\n    return toArray(input) ?? [];\n}\n\nexport function transformCache(input?: string) : DataSourceCacheOption | undefined {\n    const value = toBool(input);\n    if (typeof value === 'boolean') {\n        return value;\n    }\n\n    if (\n        input === 'redis' ||\n        input === 'ioredis' ||\n        input === 'database' ||\n        input === 'ioredis/cluster'\n    ) {\n        let options : Record<string, any> | undefined;\n        const envCacheOptions = oneOf([\n            read(EnvironmentVariableName.CACHE_OPTIONS),\n            read(EnvironmentVariableName.CACHE_OPTIONS_ALT),\n        ]);\n        if (envCacheOptions) {\n            options = JSON.parse(envCacheOptions);\n        }\n\n        return {\n            type: input,\n            options,\n            alwaysEnabled: oneOf([\n                readBool(EnvironmentVariableName.CACHE_ALWAYS_ENABLED),\n                readBool(EnvironmentVariableName.CACHE_ALWAYS_ENABLED_ALT),\n            ]),\n            duration: oneOf([\n                readInt(EnvironmentVariableName.CACHE_DURATION),\n                readInt(EnvironmentVariableName.CACHE_DURATION_ALT),\n            ]),\n        };\n    }\n\n    return undefined;\n}\n","import {\n    oneOf, read, readArray, readBool, readInt,\n} from 'envix';\nimport type { DatabaseType } from 'typeorm/driver/types/DatabaseType';\nimport { EnvironmentName, EnvironmentVariableName } from './constants';\nimport type { Environment } from './type';\nimport {\n    transformCache,\n    transformLogging,\n} from './utils';\n\nlet instance : Environment | undefined;\n\nexport function useEnv() : Environment;\nexport function useEnv<K extends keyof Environment>(key: K) : Environment[K];\nexport function useEnv(key?: string) : any {\n    if (typeof instance !== 'undefined') {\n        if (typeof key === 'string') {\n            return instance[key as keyof Environment];\n        }\n\n        return instance;\n    }\n\n    const output: Environment = {\n        env: read(EnvironmentVariableName.ENV, EnvironmentName.DEVELOPMENT) as `${EnvironmentName}`,\n\n        // Seeder\n        seeds: oneOf([\n            readArray(EnvironmentVariableName.SEEDS),\n            readArray(EnvironmentVariableName.SEEDS_ALT),\n        ]) ?? [],\n        factories: oneOf([\n            readArray(EnvironmentVariableName.FACTORIES),\n            readArray(EnvironmentVariableName.FACTORIES_ALT),\n        ]) ?? [],\n\n        // Database\n        url: oneOf([\n            read(EnvironmentVariableName.URL),\n            read(EnvironmentVariableName.URL_ALT),\n        ]),\n        host: oneOf([\n            read(EnvironmentVariableName.HOST),\n            read(EnvironmentVariableName.HOST_ALT),\n        ]),\n        port: oneOf([\n            readInt(EnvironmentVariableName.PORT),\n            readInt(EnvironmentVariableName.PORT_ALT),\n        ]),\n        username: oneOf([\n            read(EnvironmentVariableName.USERNAME),\n            read(EnvironmentVariableName.USERNAME_ALT),\n        ]),\n        password: oneOf([\n            read(EnvironmentVariableName.PASSWORD),\n            read(EnvironmentVariableName.PASSWORD_ALT),\n        ]),\n        database: oneOf([\n            read(EnvironmentVariableName.DATABASE),\n            read(EnvironmentVariableName.DATABASE_ALT),\n        ]),\n        sid: oneOf([\n            read(EnvironmentVariableName.SID),\n            read(EnvironmentVariableName.SID_ALT),\n        ]),\n        schema: oneOf([\n            read(EnvironmentVariableName.SCHEMA),\n            read(EnvironmentVariableName.SCHEMA_ALT),\n        ]),\n        extra: oneOf([\n            read(EnvironmentVariableName.DRIVER_EXTRA),\n            read(EnvironmentVariableName.DRIVER_EXTRA_ALT),\n        ]),\n        synchronize: oneOf([\n            readBool(EnvironmentVariableName.SYNCHRONIZE),\n            readBool(EnvironmentVariableName.SYNCHRONIZE_ALT),\n        ]),\n        schemaDrop: oneOf([\n            readBool(EnvironmentVariableName.SCHEMA_DROP),\n            readBool(EnvironmentVariableName.SCHEMA_DROP_ALT),\n        ]),\n        migrationsRun: oneOf([\n            readBool(EnvironmentVariableName.MIGRATIONS_RUN),\n            readBool(EnvironmentVariableName.MIGRATIONS_RUN_ALT),\n        ]),\n        entities: oneOf([\n            readArray(EnvironmentVariableName.ENTITIES),\n            readArray(EnvironmentVariableName.ENTITIES_ALT),\n        ]) ?? [],\n        migrations: oneOf([\n            readArray(EnvironmentVariableName.MIGRATIONS),\n            readArray(EnvironmentVariableName.MIGRATIONS_ALT),\n        ]) ?? [],\n        migrationsTableName: oneOf([\n            read(EnvironmentVariableName.MIGRATIONS_TABLE_NAME),\n            read(EnvironmentVariableName.MIGRATIONS_TABLE_NAME_ALT),\n        ]),\n        metadataTableName: oneOf([\n            read(EnvironmentVariableName.METADATA_TABLE_NAME),\n            read(EnvironmentVariableName.METADATA_TABLE_NAME_ALT),\n        ]),\n        subscribers: oneOf([\n            readArray(EnvironmentVariableName.SUBSCRIBERS),\n            readArray(EnvironmentVariableName.SUBSCRIBERS_ALT),\n        ]) ?? [],\n        logging: transformLogging(oneOf([\n            read(EnvironmentVariableName.LOGGING),\n            read(EnvironmentVariableName.LOGGING_ALT),\n        ])),\n        logger: oneOf([\n            read(EnvironmentVariableName.LOGGER),\n            read(EnvironmentVariableName.LOGGER_ALT),\n        ]),\n        entityPrefix: oneOf([\n            read(EnvironmentVariableName.ENTITY_PREFIX),\n            read(EnvironmentVariableName.ENTITY_PREFIX_ALT),\n        ]),\n        maxQueryExecutionTime: oneOf([\n            readInt(EnvironmentVariableName.MAX_QUERY_EXECUTION_TIME),\n            readInt(EnvironmentVariableName.MAX_QUERY_EXECUTION_TIME_ALT),\n        ]),\n        debug: oneOf([\n            read(EnvironmentVariableName.DEBUG),\n            read(EnvironmentVariableName.DEBUG_ALT),\n        ]),\n        cache: transformCache(oneOf([\n            read(EnvironmentVariableName.CACHE),\n            read(EnvironmentVariableName.CACHE_ALT),\n        ])),\n        uuidExtension: oneOf([\n            read(EnvironmentVariableName.UUID_EXTENSION),\n            read(EnvironmentVariableName.UUID_EXTENSION_ALT),\n        ]),\n\n    };\n\n    if (output.extra) {\n        output.extra = JSON.parse(output.extra); // todo: ensure record<string,any> ??\n    }\n\n    let type : string | undefined;\n    const envType = oneOf([\n        read(EnvironmentVariableName.TYPE),\n        read(EnvironmentVariableName.TYPE_ALT),\n    ]);\n\n    if (envType) {\n        type = envType;\n    } else {\n        const envURL = oneOf([\n            read(EnvironmentVariableName.URL),\n            read(EnvironmentVariableName.URL_ALT),\n        ]);\n\n        if (envURL) {\n            [type] = envURL.split('://');\n        }\n    }\n\n    if (type) {\n        output.type = type as DatabaseType; // todo: maybe validation here\n    }\n\n    instance = output;\n\n    if (typeof key === 'string') {\n        return output[key as keyof Environment];\n    }\n\n    return instance;\n}\n\nexport function resetEnv() {\n    if (typeof instance !== 'undefined') {\n        instance = undefined;\n    }\n}\n","import { createMerger } from 'smob';\nimport type { DataSourceOptions } from 'typeorm';\n\nconst merge = createMerger({\n    strategy: (target, key, value) => {\n        if (typeof target[key] === 'undefined') {\n            target[key] = value;\n\n            return target;\n        }\n\n        return undefined;\n    },\n});\n\nexport function mergeDataSourceOptions(\n    target: DataSourceOptions,\n    source: DataSourceOptions,\n) {\n    if (target.type !== source.type) {\n        return target;\n    }\n\n    return merge(target, source);\n}\n","import type { DataSourceOptions } from 'typeorm';\nimport type { BaseDataSourceOptions } from 'typeorm/data-source/BaseDataSourceOptions';\nimport type { PostgresConnectionOptions } from 'typeorm/driver/postgres/PostgresConnectionOptions';\nimport type { DatabaseType } from 'typeorm/driver/types/DatabaseType';\nimport type { LoggerOptions } from 'typeorm/logger/LoggerOptions';\nimport { useEnv } from '../../../env';\nimport { mergeDataSourceOptions } from './merge';\n\nexport function hasEnvDataSourceOptions() : boolean {\n    return !!useEnv('type');\n}\n\n/* istanbul ignore next */\nexport function readDataSourceOptionsFromEnv() : DataSourceOptions | undefined {\n    if (!hasEnvDataSourceOptions()) {\n        return undefined;\n    }\n\n    // todo: include seeder options\n    const base : Omit<BaseDataSourceOptions, 'poolSize'> = {\n        type: useEnv('type') as DatabaseType,\n        entities: useEnv('entities'),\n        subscribers: useEnv('subscribers'),\n        migrations: useEnv('migrations'),\n        migrationsTableName: useEnv('migrationsTableName'),\n        // migrationsTransactionMode: useEnv('migra')\n        metadataTableName: useEnv('metadataTableName'),\n        logging: useEnv('logging') as LoggerOptions,\n        logger: useEnv('logger') as BaseDataSourceOptions['logger'],\n        maxQueryExecutionTime: useEnv('maxQueryExecutionTime'),\n        synchronize: useEnv('synchronize'),\n        migrationsRun: useEnv('migrationsRun'),\n        dropSchema: useEnv('schemaDrop'),\n        entityPrefix: useEnv('entityPrefix'),\n        extra: useEnv('extra'),\n        cache: useEnv('cache'),\n    };\n\n    const credentialOptions = {\n        url: useEnv('url'),\n        host: useEnv('host'),\n        port: useEnv('port'),\n        username: useEnv('username'),\n        password: useEnv('password'),\n        database: useEnv('database'),\n    };\n\n    if (base.type === 'mysql' || base.type === 'mariadb') {\n        return {\n            ...base,\n            ...credentialOptions,\n            type: base.type,\n        };\n    }\n\n    if (base.type === 'postgres') {\n        return {\n            ...base,\n            ...credentialOptions,\n            type: base.type,\n            schema: useEnv('schema'),\n            uuidExtension: useEnv('uuidExtension') as PostgresConnectionOptions['uuidExtension'],\n        };\n    }\n\n    if (base.type === 'cockroachdb') {\n        return {\n            ...base,\n            ...credentialOptions,\n            type: base.type,\n            schema: useEnv('schema'),\n            timeTravelQueries: true,\n        };\n    }\n\n    if (base.type === 'sqlite') {\n        return {\n            ...base,\n            type: base.type,\n            database: useEnv('database') || 'db.sqlite',\n        };\n    }\n\n    if (base.type === 'better-sqlite3') {\n        return {\n            ...base,\n            type: base.type,\n            database: useEnv('database') || 'db.sqlite',\n        };\n    }\n\n    if (base.type === 'mssql') {\n        return {\n            ...base,\n            ...credentialOptions,\n            type: base.type,\n            schema: useEnv('schema'),\n        };\n    }\n\n    if (base.type === 'oracle') {\n        return {\n            ...base,\n            ...credentialOptions,\n            type: base.type,\n            sid: useEnv('sid'),\n        };\n    }\n\n    return {\n        ...base,\n        ...credentialOptions,\n    } as DataSourceOptions;\n}\n\nexport function mergeDataSourceOptionsWithEnv(options: DataSourceOptions) {\n    const env = readDataSourceOptionsFromEnv();\n    if (!env) {\n        return options;\n    }\n\n    return mergeDataSourceOptions(env, options);\n}\n","import { isObject } from 'locter';\nimport type { DataSourceOptions } from 'typeorm';\nimport { OptionsError } from '../../errors';\nimport { adjustFilePaths, readTSConfig } from '../../utils';\nimport type { TSConfig } from '../../utils';\nimport { findDataSource } from '../find';\nimport type { DataSourceOptionsBuildContext } from './type';\nimport {\n    mergeDataSourceOptionsWithEnv,\n    readDataSourceOptionsFromEnv,\n} from './utils';\n\n/**\n * Build DataSourceOptions from DataSource or from configuration.\n *\n * @param context\n */\nexport async function buildDataSourceOptions(\n    context: DataSourceOptionsBuildContext = {},\n) : Promise<DataSourceOptions> {\n    const directory : string = context.directory || process.cwd();\n\n    let tsconfig : TSConfig | undefined;\n    if (!context.preserveFilePaths) {\n        if (isObject(context.tsconfig)) {\n            tsconfig = context.tsconfig;\n        } else {\n            tsconfig = await readTSConfig(context.tsconfig);\n        }\n    }\n\n    const dataSource = await findDataSource({\n        directory,\n        fileName: context.dataSourceName,\n        tsconfig,\n    });\n\n    if (dataSource) {\n        if (context.preserveFilePaths) {\n            return mergeDataSourceOptionsWithEnv(dataSource.options);\n        }\n\n        const options = await adjustFilePaths(\n            dataSource.options,\n            [\n                'entities',\n                'migrations',\n                'subscribers',\n            ],\n            tsconfig,\n        );\n\n        return mergeDataSourceOptionsWithEnv(options);\n    }\n\n    const options = readDataSourceOptionsFromEnv();\n    if (options) {\n        if (context.preserveFilePaths) {\n            return options;\n        }\n\n        return adjustFilePaths(\n            options,\n            ['entities', 'migrations', 'subscribers'],\n            tsconfig,\n        );\n    }\n\n    throw OptionsError.notFound();\n}\n","import type { DataSourceOptions } from 'typeorm';\nimport { buildDataSourceOptions } from './module';\n\nconst instances : Record<string, DataSourceOptions> = {};\nconst instancePromises : Record<string, Promise<DataSourceOptions>> = {};\n\nexport function setDataSourceOptions(\n    options: DataSourceOptions,\n    alias?: string,\n) {\n    instances[alias || 'default'] = options;\n}\n\nexport function hasDataSourceOptions(alias?: string) : boolean {\n    return Object.prototype.hasOwnProperty.call(instances, alias || 'default');\n}\n\nexport async function useDataSourceOptions(alias?: string) : Promise<DataSourceOptions> {\n    alias = alias || 'default';\n\n    if (Object.prototype.hasOwnProperty.call(instances, alias)) {\n        return instances[alias];\n    }\n\n    /* istanbul ignore next */\n    if (!Object.prototype.hasOwnProperty.call(instancePromises, alias)) {\n        instancePromises[alias] = buildDataSourceOptions()\n            .catch((e) => {\n                if (alias) {\n                    delete instancePromises[alias];\n                }\n\n                throw e;\n            });\n    }\n\n    instances[alias] = await instancePromises[alias];\n\n    return instances[alias];\n}\n","import type { DataSourceOptions } from 'typeorm';\nimport { DataSource } from 'typeorm';\nimport { useDataSourceOptions } from './options';\n\nconst instances : Record<string, DataSource> = {};\n\nconst initializePromises : Record<string, Promise<DataSource>> = {};\nconst optionsPromises: Record<string, Promise<DataSourceOptions>> = {};\n\nexport function setDataSource(\n    dataSource: DataSource,\n    alias?: string,\n) {\n    alias = alias || 'default';\n\n    instances[alias] = dataSource;\n}\n\nexport function hasDataSource(alias?: string) : boolean {\n    alias = alias || 'default';\n\n    return Object.prototype.hasOwnProperty.call(instances, alias);\n}\n\nexport function unsetDataSource(alias?: string) {\n    alias = alias || 'default';\n\n    if (Object.prototype.hasOwnProperty.call(instances, alias)) {\n        delete instances[alias];\n    }\n\n    /* istanbul ignore next */\n    if (Object.prototype.hasOwnProperty.call(optionsPromises, alias)) {\n        delete optionsPromises[alias];\n    }\n\n    /* istanbul ignore next */\n    if (Object.prototype.hasOwnProperty.call(initializePromises, alias)) {\n        delete initializePromises[alias];\n    }\n}\n\nexport async function useDataSource(alias?: string) : Promise<DataSource> {\n    alias = alias || 'default';\n\n    if (Object.prototype.hasOwnProperty.call(instances, alias)) {\n        if (!instances[alias].isInitialized) {\n            /* istanbul ignore next */\n            if (!Object.prototype.hasOwnProperty.call(initializePromises, alias)) {\n                initializePromises[alias] = instances[alias].initialize()\n                    .catch((e) => {\n                        if (alias) {\n                            delete initializePromises[alias];\n                        }\n\n                        throw e;\n                    });\n            }\n\n            await initializePromises[alias];\n        }\n\n        return instances[alias];\n    }\n\n    /* istanbul ignore next */\n    if (!Object.prototype.hasOwnProperty.call(optionsPromises, alias)) {\n        optionsPromises[alias] = useDataSourceOptions(alias)\n            .catch((e) => {\n                if (alias) {\n                    delete optionsPromises[alias];\n                }\n\n                throw e;\n            });\n    }\n\n    const options = await optionsPromises[alias];\n\n    const dataSource = new DataSource(options);\n\n    /* istanbul ignore next */\n    if (!Object.prototype.hasOwnProperty.call(initializePromises, alias)) {\n        initializePromises[alias] = dataSource.initialize()\n            .catch((e) => {\n                if (alias) {\n                    delete initializePromises[alias];\n                }\n\n                throw e;\n            });\n    }\n\n    await initializePromises[alias];\n\n    instances[alias] = dataSource;\n\n    return dataSource;\n}\n","import { DataSource, MigrationExecutor } from 'typeorm';\nimport {\n    hasDataSource,\n    setDataSource,\n    unsetDataSource,\n    useDataSource,\n    useDataSourceOptions,\n} from '../data-source';\nimport { hasStringProperty } from '../utils';\nimport type { DatabaseCheckContext, DatabaseCheckResult } from './type';\n\n/**\n * Check database setup progress.\n *\n * @param context\n */\nexport async function checkDatabase(context?: DatabaseCheckContext) : Promise<DatabaseCheckResult> {\n    context = context || {};\n    context.dataSourceCleanup = context.dataSourceCleanup ?? true;\n\n    const result : DatabaseCheckResult = {\n        exists: true,\n        schema: false,\n        migrationsPending: [],\n    };\n\n    let { dataSource } = context;\n\n    if (\n        typeof dataSource === 'undefined' &&\n        hasDataSource(context.alias)\n    ) {\n        // todo: data-source might get initialized here\n        dataSource = await useDataSource(context.alias);\n    }\n\n    const dataSourceExisted = !!dataSource;\n\n    if (typeof dataSource === 'undefined') {\n        if (context.options) {\n            dataSource = new DataSource({\n                ...context.options,\n                synchronize: false,\n            });\n        } else {\n            const options = await useDataSourceOptions(context.alias);\n            dataSource = new DataSource({\n                ...options,\n                synchronize: false,\n            });\n        }\n    }\n\n    try {\n        if (!dataSource.isInitialized) {\n            await dataSource.initialize();\n        }\n    } catch (e) {\n        result.exists = false;\n\n        return result;\n    }\n\n    const queryRunner = dataSource.createQueryRunner();\n\n    if (\n        dataSource.migrations &&\n        dataSource.migrations.length > 0\n    ) {\n        const migrationExecutor = new MigrationExecutor(dataSource, queryRunner);\n        result.migrationsPending = await migrationExecutor.getPendingMigrations();\n\n        if (result.migrationsPending.length === 0) {\n            result.schema = true;\n        }\n    } else {\n        let schema : string | undefined;\n        if (hasStringProperty(dataSource.driver.options, 'schema')) {\n            schema = dataSource.driver.options.schema;\n        }\n\n        const migrationsTableName = dataSource.driver.buildTableName(\n            dataSource.options.migrationsTableName || 'migrations',\n            schema,\n            dataSource.driver.database,\n        );\n        const migrationsTableExists = await queryRunner.hasTable(migrationsTableName);\n        if (migrationsTableExists) {\n            result.schema = dataSource.entityMetadatas.length === 0;\n        } else {\n            const tableNames = dataSource.entityMetadatas.map((entityMetadata) => entityMetadata.tablePath);\n            const tables = await queryRunner.getTables(tableNames);\n\n            result.schema = tables.length === dataSource.entityMetadatas.length;\n        }\n    }\n\n    await queryRunner.release();\n\n    if (!dataSourceExisted) {\n        if (context.dataSourceCleanup) {\n            await dataSource.destroy();\n\n            if (!context.dataSource) {\n                unsetDataSource(context.alias);\n            }\n        } else {\n            setDataSource(dataSource, context.alias);\n        }\n    }\n\n    return result;\n}\n","import type { DataSourceOptions } from 'typeorm';\nimport { hasOwnProperty } from '../../../utils';\n\nexport function getCharsetFromDataSourceOptions(options: DataSourceOptions) : string | undefined {\n    if (\n        hasOwnProperty(options, 'charset') &&\n        typeof options.charset === 'string'\n    ) {\n        return options.charset;\n    }\n\n    if (typeof options?.extra?.charset === 'string') {\n        return options.extra.charset;\n    }\n\n    return undefined;\n}\n","import type { DataSourceOptions } from 'typeorm';\nimport { hasOwnProperty } from '../../../utils';\n\nexport function getCharacterSetFromDataSourceOptions(options: DataSourceOptions) : string | undefined {\n    if (\n        hasOwnProperty(options, 'characterSet') &&\n        typeof options.characterSet === 'string'\n    ) {\n        return options.characterSet;\n    }\n\n    if (typeof options?.extra?.characterSet === 'string') {\n        return options.extra.characterSet;\n    }\n\n    return undefined;\n}\n","import type { DataSourceOptions } from 'typeorm';\nimport { DriverUtils } from 'typeorm/driver/DriverUtils';\nimport { getCharsetFromDataSourceOptions } from './charset';\nimport { getCharacterSetFromDataSourceOptions } from './character-set';\nimport type { DriverOptions } from '../type';\n\nexport function buildDriverOptions(options: DataSourceOptions): DriverOptions {\n    let driverOptions: Record<string, any>;\n\n    switch (options.type) {\n        case 'mysql':\n        case 'mariadb':\n        case 'postgres':\n        case 'cockroachdb':\n        case 'mssql':\n        case 'oracle':\n            driverOptions = DriverUtils.buildDriverOptions(options.replication ? options.replication.master : options);\n            break;\n        case 'mongodb':\n            driverOptions = DriverUtils.buildMongoDBDriverOptions(options);\n            break;\n        default:\n            driverOptions = DriverUtils.buildDriverOptions(options);\n    }\n\n    const charset = getCharsetFromDataSourceOptions(options);\n    const characterSet = getCharacterSetFromDataSourceOptions(options);\n\n    return {\n        host: driverOptions.host,\n        user: driverOptions.user || driverOptions.username,\n        password: driverOptions.password,\n        database: driverOptions.database,\n        port: driverOptions.port,\n        ...(charset ? { charset } : {}),\n        ...(characterSet ? { characterSet } : {}),\n        ...(driverOptions.ssl ? { ssl: driverOptions.ssl } : {}),\n        ...(driverOptions.url ? { url: driverOptions.url } : {}),\n        ...(driverOptions.connectString ? { connectString: driverOptions.connectString } : {}),\n        ...(driverOptions.sid ? { sid: driverOptions.sid } : {}),\n        ...(driverOptions.serviceName ? { serviceName: driverOptions.serviceName } : {}),\n        ...(options.extra ? { extra: options.extra } : {}),\n        ...(driverOptions.domain ? { domain: driverOptions.domain } : {}),\n    };\n}\n","import type { DataSource, DataSourceOptions } from 'typeorm';\nimport { DriverFactory } from 'typeorm/driver/DriverFactory';\n\nconst driversRequireDatabaseOption: DataSourceOptions['type'][] = [\n    'sqlite',\n    'better-sqlite3',\n];\n\nexport function createDriver(connectionOptions: DataSourceOptions) {\n    const fakeConnection: DataSource = {\n        options: {\n            type: connectionOptions.type,\n            ...(driversRequireDatabaseOption.indexOf(connectionOptions.type) !== -1 ? {\n                database: connectionOptions.database,\n            } : {}),\n        },\n    } as DataSource;\n\n    const driverFactory = new DriverFactory();\n    return driverFactory.create(fakeConnection);\n}\n","import type { DataSourceOptions } from 'typeorm';\nimport { buildDataSourceOptions } from '../../data-source/options';\nimport type { DatabaseBaseContext, DatabaseCreateContext, DatabaseDropContext } from '../type';\nimport { findDataSource } from '../../data-source';\n\nasync function setDatabaseContextOptions<T extends DatabaseBaseContext>(context: T) : Promise<T> {\n    if (!context.options) {\n        const dataSource = await findDataSource(context.findOptions);\n        if (dataSource) {\n            context.options = dataSource.options;\n        }\n\n        if (!context.options) {\n            context.options = await buildDataSourceOptions();\n        }\n    }\n\n    Object.assign(context.options, {\n        subscribers: [],\n        synchronize: false,\n        migrationsRun: false,\n        dropSchema: false,\n    } satisfies Partial<DataSourceOptions>);\n\n    return context;\n}\n\nexport async function buildDatabaseCreateContext(\n    context?: DatabaseCreateContext,\n) : Promise<DatabaseCreateContext> {\n    context = context || {};\n\n    context = await setDatabaseContextOptions(context);\n\n    if (typeof context.synchronize === 'undefined') {\n        context.synchronize = true;\n    }\n\n    if (typeof context.ifNotExist === 'undefined') {\n        context.ifNotExist = true;\n    }\n\n    return context;\n}\n\nexport async function buildDatabaseDropContext(\n    context?: DatabaseDropContext,\n) : Promise<DatabaseDropContext> {\n    context = context || {};\n    context = await setDatabaseContextOptions(context);\n\n    if (typeof context.ifExist === 'undefined') {\n        context.ifExist = true;\n    }\n\n    return context;\n}\n","import { pascalCase } from 'pascal-case';\nimport path from 'node:path';\nimport fs from 'node:fs';\nimport process from 'node:process';\nimport { MigrationGenerateCommand } from 'typeorm/commands/MigrationGenerateCommand';\nimport type { MigrationGenerateCommandContext, MigrationGenerateResult } from './type';\n\nclass GenerateCommand extends MigrationGenerateCommand {\n    static prettify(query: string) {\n        return this.prettifyQuery(query);\n    }\n}\n\nfunction queryParams(parameters: any[] | undefined): string {\n    if (!parameters || !parameters.length) {\n        return '';\n    }\n\n    return `, ${JSON.stringify(parameters)}`;\n}\n\nfunction buildTemplate(\n    name: string,\n    timestamp: number,\n    upStatements: string[],\n    downStatements: string[],\n): string {\n    const migrationName = `${pascalCase(name)}${timestamp}`;\n\n    const up = upStatements.map((statement) => `        ${statement}`);\n    const down = downStatements.map((statement) => `        ${statement}`);\n\n    return `import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class ${migrationName} implements MigrationInterface {\n    name = '${migrationName}';\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n${up.join(`\n`)}\n    }\n    public async down(queryRunner: QueryRunner): Promise<void> {\n${down.join(`\n`)}\n    }\n}\n`;\n}\n\nexport async function generateMigration(\n    context: MigrationGenerateCommandContext,\n) : Promise<MigrationGenerateResult> {\n    context.name = context.name || 'Default';\n\n    const timestamp = context.timestamp || new Date().getTime();\n    const fileName = `${timestamp}-${context.name}.ts`;\n\n    const { dataSource } = context;\n\n    const up: string[] = []; const\n        down: string[] = [];\n\n    if (!dataSource.isInitialized) {\n        await dataSource.initialize();\n    }\n\n    const sqlInMemory = await dataSource.driver.createSchemaBuilder().log();\n\n    if (context.prettify) {\n        sqlInMemory.upQueries.forEach((upQuery) => {\n            upQuery.query = GenerateCommand.prettify(\n                upQuery.query,\n            );\n        });\n        sqlInMemory.downQueries.forEach((downQuery) => {\n            downQuery.query = GenerateCommand.prettify(\n                downQuery.query,\n            );\n        });\n    }\n\n    sqlInMemory.upQueries.forEach((upQuery) => {\n        up.push(`await queryRunner.query(\\`${upQuery.query.replace(/`/g, '\\\\`')}\\`${queryParams(upQuery.parameters)});`);\n    });\n\n    sqlInMemory.downQueries.forEach((downQuery) => {\n        down.push(`await queryRunner.query(\\`${downQuery.query.replace(/`/g, '\\\\`')}\\`${queryParams(downQuery.parameters)});`);\n    });\n\n    await dataSource.destroy();\n\n    if (\n        up.length === 0 &&\n        down.length === 0\n    ) {\n        return { up, down };\n    }\n\n    const content = buildTemplate(context.name, timestamp, up, down.reverse());\n\n    if (!context.preview) {\n        let directoryPath : string;\n        if (context.directoryPath) {\n            if (!path.isAbsolute(context.directoryPath)) {\n                directoryPath = path.join(process.cwd(), context.directoryPath);\n            } else {\n                directoryPath = context.directoryPath;\n            }\n        } else {\n            directoryPath = path.join(process.cwd(), 'migrations');\n        }\n\n        try {\n            await fs.promises.access(directoryPath, fs.constants.R_OK | fs.constants.W_OK);\n        } catch (e) {\n            await fs.promises.mkdir(directoryPath, { recursive: true });\n        }\n\n        const filePath = path.join(directoryPath, fileName);\n\n        await fs.promises.writeFile(filePath, content, { encoding: 'utf-8' });\n    }\n\n    return {\n        up,\n        down,\n        content,\n    };\n}\n","/* istanbul ignore next */\nimport type { ObjectLiteral } from 'rapiq';\nimport type { SelectQueryBuilder } from 'typeorm';\n\nexport function existsQuery<T extends ObjectLiteral = ObjectLiteral>(builder: SelectQueryBuilder<T>, inverse = false) {\n    return `${inverse ? 'not ' : ''}exists (${builder.getQuery()})`;\n}\n","import type { DataSourceOptions, Migration } from 'typeorm';\nimport { DataSource, InstanceChecker } from 'typeorm';\n\nexport async function synchronizeDatabaseSchema(\n    input: DataSource | DataSourceOptions,\n) : Promise<Migration[]> {\n    let dataSource: DataSource;\n    let options: DataSourceOptions;\n\n    if (InstanceChecker.isDataSource(input)) {\n        dataSource = input;\n        options = dataSource.options;\n    } else {\n        options = input;\n        dataSource = new DataSource(options);\n    }\n\n    if (!dataSource.isInitialized) {\n        await dataSource.initialize();\n    }\n\n    let migrationsCount = 0;\n    if (input.migrations) {\n        migrationsCount = Array.isArray(input.migrations) ?\n            input.migrations.length :\n            Object.keys(input.migrations).length;\n    }\n\n    let migrations : Migration[] = [];\n\n    if (migrationsCount > 0) {\n        migrations = await dataSource.runMigrations({\n            transaction: options.migrationsTransactionMode,\n        });\n    } else {\n        await dataSource.synchronize(false);\n    }\n\n    if (!InstanceChecker.isDataSource(input)) {\n        await dataSource.destroy();\n    }\n\n    return migrations;\n}\n","import { isObject } from 'locter';\nimport type { PostgresDriver } from 'typeorm/driver/postgres/PostgresDriver';\nimport type { CockroachDriver } from 'typeorm/driver/cockroachdb/CockroachDriver';\nimport { OptionsError } from '../../errors';\nimport type { DatabaseBaseContext, DatabaseCreateContext, DatabaseDropContext } from '../type';\nimport { hasOwnProperty } from '../../utils';\nimport type { DriverOptions } from './type';\nimport { buildDriverOptions, createDriver } from './utils';\nimport { buildDatabaseCreateContext, buildDatabaseDropContext, synchronizeDatabaseSchema } from '../utils';\n\nexport async function createSimplePostgresConnection(\n    driver: PostgresDriver | CockroachDriver,\n    options: DriverOptions,\n    operationContext: DatabaseBaseContext,\n) {\n    /**\n     * pg library\n     */\n    const { Client } = driver.postgres;\n\n    const data : Record<string, any> = {\n        host: options.host,\n        port: options.port,\n        user: options.user,\n        password: options.password,\n        ssl: options.ssl,\n        ...(options.extra ? options.extra : {}),\n    };\n\n    if (typeof operationContext.initialDatabase === 'string') {\n        data.database = operationContext.initialDatabase;\n    }\n\n    const client = new Client(data);\n\n    await client.connect();\n\n    return client;\n}\n\nexport async function executeSimplePostgresQuery(connection: any, query: string, endConnection = true) {\n    return new Promise(((resolve, reject) => {\n        connection.query(query, (queryErr: any, queryResult: any) => {\n            if (endConnection) {\n                connection.end();\n            }\n\n            if (queryErr) {\n                reject(queryErr);\n            }\n\n            resolve(queryResult);\n        });\n    }));\n}\n\nexport async function createPostgresDatabase(\n    context?: DatabaseCreateContext,\n) {\n    context = await buildDatabaseCreateContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as PostgresDriver;\n\n    const connection = await createSimplePostgresConnection(driver, options, context);\n\n    if (context.ifNotExist) {\n        const existQuery = `SELECT * FROM pg_database WHERE lower(datname) = lower('${options.database}');`;\n        const existResult = await executeSimplePostgresQuery(connection, existQuery, false);\n\n        if (\n            isObject(existResult) &&\n            hasOwnProperty(existResult, 'rows') &&\n            Array.isArray(existResult.rows) &&\n            existResult.rows.length > 0\n        ) {\n            await connection.end();\n\n            return Promise.resolve();\n        }\n    }\n\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/postgres/PostgresQueryRunner.ts#L326\n     */\n    let query = `CREATE DATABASE \"${options.database}\"`;\n    if (typeof options.characterSet === 'string') {\n        query += ` WITH ENCODING '${options.characterSet}'`;\n    }\n\n    const result = await executeSimplePostgresQuery(connection, query);\n\n    if (context.synchronize) {\n        await synchronizeDatabaseSchema(context.options);\n    }\n\n    return result;\n}\n\nexport async function dropPostgresDatabase(\n    context?: DatabaseDropContext,\n) {\n    context = await buildDatabaseDropContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as PostgresDriver;\n\n    const connection = await createSimplePostgresConnection(driver, options, context);\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/postgres/PostgresQueryRunner.ts#L343\n     */\n    const query = context.ifExist ?\n        `DROP DATABASE IF EXISTS \"${options.database}\"` :\n        `DROP DATABASE \"${options.database}\"`;\n\n    return executeSimplePostgresQuery(connection, query);\n}\n","import type { CockroachDriver } from 'typeorm/driver/cockroachdb/CockroachDriver';\nimport { OptionsError } from '../../errors';\nimport type { DatabaseCreateContext, DatabaseDropContext } from '../type';\nimport { createSimplePostgresConnection } from './postgres';\nimport { buildDriverOptions, createDriver } from './utils';\nimport { buildDatabaseCreateContext, buildDatabaseDropContext, synchronizeDatabaseSchema } from '../utils';\n\nexport async function executeSimpleCockroachDBQuery(connection: any, query: string, endConnection = true) {\n    return new Promise(((resolve, reject) => {\n        connection.query(query, (queryErr: any, queryResult: any) => {\n            if (endConnection) {\n                connection.end();\n            }\n\n            if (queryErr) {\n                reject(queryErr);\n            }\n\n            resolve(queryResult);\n        });\n    }));\n}\n\nexport async function createCockroachDBDatabase(\n    context?: DatabaseCreateContext,\n) {\n    context = await buildDatabaseCreateContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as CockroachDriver;\n\n    const connection = await createSimplePostgresConnection(\n        driver,\n        options,\n        context,\n    );\n\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/cockroachdb/CockroachQueryRunner.ts#L347\n     */\n    const query = `CREATE DATABASE ${context.ifNotExist ? 'IF NOT EXISTS ' : ''} \"${options.database}\"`;\n    const result = await executeSimpleCockroachDBQuery(connection, query);\n\n    if (context.synchronize) {\n        await synchronizeDatabaseSchema(context.options);\n    }\n\n    return result;\n}\n\nexport async function dropCockroachDBDatabase(\n    context?: DatabaseDropContext,\n) {\n    context = await buildDatabaseDropContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as CockroachDriver;\n\n    const connection = await createSimplePostgresConnection(\n        driver,\n        options,\n        context,\n    );\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/cockroachdb/CockroachQueryRunner.ts#L356\n     */\n    const query = `DROP DATABASE ${context.ifExist ? 'IF EXISTS ' : ''} \"${options.database}\"`;\n\n    return executeSimpleCockroachDBQuery(connection, query);\n}\n","import type { MongoDriver } from 'typeorm/driver/mongodb/MongoDriver';\nimport { OptionsError } from '../../errors';\nimport type { DatabaseCreateContext, DatabaseDropContext } from '../type';\nimport type { DriverOptions } from './type';\nimport { buildDriverOptions, createDriver } from './utils';\nimport { buildDatabaseCreateContext, buildDatabaseDropContext, synchronizeDatabaseSchema } from '../utils';\n\nexport async function createSimpleMongoDBConnection(\n    driver: MongoDriver,\n    options: DriverOptions,\n) {\n    /**\n     * mongodb library\n     */\n    const { MongoClient } = driver.mongodb;\n\n    let url = 'mongodb://';\n    if (options.user && options.password) {\n        url += `${options.user}:${options.password}@`;\n    }\n\n    url += `${options.host || '127.0.0.1'}:${options.port || 27017}/${options.database}`;\n    if (options.ssl) {\n        url += '?tls=true';\n    }\n\n    const client = new MongoClient(url);\n    await client.connect();\n    return client;\n}\n\nexport async function createMongoDBDatabase(\n    context?: DatabaseCreateContext,\n) {\n    context = await buildDatabaseCreateContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as MongoDriver;\n\n    // connection setup, will create the database on the fly.\n    const client = await createSimpleMongoDBConnection(driver, options);\n    await client.close();\n\n    if (context.synchronize) {\n        await synchronizeDatabaseSchema(context.options);\n    }\n}\n\nexport async function dropMongoDBDatabase(\n    context?: DatabaseDropContext,\n) {\n    context = await buildDatabaseDropContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as MongoDriver;\n\n    const client = await createSimpleMongoDBConnection(driver, options);\n    const result = await client.dropDatabase();\n    await client.close();\n\n    return result;\n}\n","import type { SqlServerDriver } from 'typeorm/driver/sqlserver/SqlServerDriver';\nimport { OptionsError } from '../../errors';\nimport type { DatabaseCreateContext, DatabaseDropContext } from '../type';\nimport type { DriverOptions } from './type';\nimport { buildDriverOptions, createDriver } from './utils';\nimport { buildDatabaseCreateContext, buildDatabaseDropContext, synchronizeDatabaseSchema } from '../utils';\n\nexport async function createSimpleMsSQLConnection(\n    driver: SqlServerDriver,\n    options: DriverOptions,\n) {\n    const option : Record<string, any> = {\n        user: options.user,\n        password: options.password,\n        server: options.host,\n        port: options.port || 1433,\n        ...(options.extra ? options.extra : {}),\n        ...(options.domain ? { domain: options.domain } : {}),\n    };\n\n    await driver.mssql.connect(option);\n\n    return driver.mssql;\n}\n\nexport async function createMsSQLDatabase(\n    context?: DatabaseCreateContext,\n) {\n    context = await buildDatabaseCreateContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as SqlServerDriver;\n\n    const connection = await createSimpleMsSQLConnection(driver, options);\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/sqlserver/SqlServerQueryRunner.ts#L416\n     */\n    let query = context.ifNotExist ?\n        `IF DB_ID('${options.database}') IS NULL CREATE DATABASE \"${options.database}\"` :\n        `CREATE DATABASE \"${options.database}\"`;\n\n    if (typeof options.characterSet === 'string') {\n        query += ` CHARACTER SET ${options.characterSet}`;\n    }\n\n    const result = await connection.query(query);\n\n    if (context.synchronize) {\n        await synchronizeDatabaseSchema(context.options);\n    }\n\n    return result;\n}\n\nexport async function dropMsSQLDatabase(\n    context?: DatabaseDropContext,\n) {\n    context = await buildDatabaseDropContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as SqlServerDriver;\n\n    const connection = await createSimpleMsSQLConnection(driver, options);\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/sqlserver/SqlServerQueryRunner.ts#L425\n     */\n    const query = context.ifExist ?\n        `IF DB_ID('${options.database}') IS NOT NULL DROP DATABASE \"${options.database}\"` :\n        `DROP DATABASE \"${options.database}\"`;\n\n    return connection.query(query);\n}\n","import type { MysqlDriver } from 'typeorm/driver/mysql/MysqlDriver';\nimport { OptionsError } from '../../errors';\nimport type { DatabaseCreateContext, DatabaseDropContext } from '../type';\nimport type { DriverOptions } from './type';\nimport { buildDriverOptions, createDriver } from './utils';\nimport { buildDatabaseCreateContext, buildDatabaseDropContext, synchronizeDatabaseSchema } from '../utils';\n\nexport async function createSimpleMySQLConnection(\n    driver: MysqlDriver,\n    options: DriverOptions,\n) {\n    /**\n     * mysql|mysql2 library\n     */\n    const { createConnection } = driver.mysql;\n\n    const option : Record<string, any> = {\n        host: options.host,\n        user: options.user,\n        password: options.password,\n        port: options.port,\n        ssl: options.ssl,\n        ...(options.extra ? options.extra : {}),\n    };\n\n    return createConnection(option);\n}\n\nexport async function executeSimpleMysqlQuery(connection: any, query: string, endConnection = true) {\n    return new Promise(((resolve, reject) => {\n        connection.query(query, (queryErr: any, queryResult: any) => {\n            if (endConnection) connection.end();\n\n            if (queryErr) {\n                reject(queryErr);\n            }\n\n            resolve(queryResult);\n        });\n    }));\n}\n\nexport async function createMySQLDatabase(\n    context?: DatabaseCreateContext,\n) {\n    context = await buildDatabaseCreateContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as MysqlDriver;\n\n    const connection = await createSimpleMySQLConnection(driver, options);\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/mysql/MysqlQueryRunner.ts#L297\n     */\n    let query = context.ifNotExist ?\n        `CREATE DATABASE IF NOT EXISTS \\`${options.database}\\`` :\n        `CREATE DATABASE \\`${options.database}\\``;\n\n    if (typeof options.charset === 'string') {\n        const { charset } = options;\n        let { characterSet } = options;\n\n        if (typeof characterSet === 'undefined') {\n            if (charset.toLowerCase().startsWith('utf8mb4')) {\n                characterSet = 'utf8mb4';\n            } else if (charset.toLowerCase().startsWith('utf8')) {\n                characterSet = 'utf8';\n            }\n        }\n\n        if (typeof characterSet === 'string') {\n            query += ` CHARACTER SET ${characterSet} COLLATE ${charset}`;\n        }\n    }\n\n    const result = await executeSimpleMysqlQuery(connection, query);\n\n    if (context.synchronize) {\n        await synchronizeDatabaseSchema(context.options);\n    }\n\n    return result;\n}\n\nexport async function dropMySQLDatabase(\n    context?: DatabaseDropContext,\n) {\n    context = await buildDatabaseDropContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as MysqlDriver;\n\n    const connection = await createSimpleMySQLConnection(driver, options);\n\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/mysql/MysqlQueryRunner.ts#L306\n     */\n    const query = context.ifExist ?\n        `DROP DATABASE IF EXISTS \\`${options.database}\\`` :\n        `DROP DATABASE \\`${options.database}\\``;\n\n    await executeSimpleMysqlQuery(connection, 'SET FOREIGN_KEY_CHECKS=0;', false);\n    const result = await executeSimpleMysqlQuery(connection, query, false);\n    await executeSimpleMysqlQuery(connection, 'SET FOREIGN_KEY_CHECKS=1;');\n    return result;\n}\n","import type { OracleDriver } from 'typeorm/driver/oracle/OracleDriver';\nimport { OptionsError } from '../../errors';\nimport type { DatabaseCreateContext, DatabaseDropContext } from '../type';\nimport type { DriverOptions } from './type';\nimport { buildDriverOptions, createDriver } from './utils';\nimport { buildDatabaseCreateContext, synchronizeDatabaseSchema } from '../utils';\n\nexport function createSimpleOracleConnection(\n    driver: OracleDriver,\n    options: DriverOptions,\n) {\n    const { getConnection } = driver.oracle;\n\n    if (!options.connectString) {\n        let address = '(PROTOCOL=TCP)';\n\n        if (options.host) {\n            address += `(HOST=${options.host})`;\n        }\n\n        if (options.port) {\n            address += `(PORT=${options.port})`;\n        }\n\n        let connectData = '(SERVER=DEDICATED)';\n\n        if (options.sid) {\n            connectData += `(SID=${options.sid})`;\n        }\n\n        if (options.serviceName) {\n            connectData += `(SERVICE_NAME=${options.serviceName})`;\n        }\n\n        options.connectString = `(DESCRIPTION=(ADDRESS=${address})(CONNECT_DATA=${connectData}))`;\n    }\n\n    return getConnection({\n        user: options.user,\n        password: options.password,\n        connectString: options.connectString || options.url,\n        ...(options.extra ? options.extra : {}),\n    });\n}\n\nexport async function createOracleDatabase(\n    context?: DatabaseCreateContext,\n) {\n    context = await buildDatabaseCreateContext(context);\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    const driver = createDriver(context.options) as OracleDriver;\n\n    const connection = createSimpleOracleConnection(driver, options);\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/oracle/OracleQueryRunner.ts#L295\n     */\n    const query = `CREATE DATABASE IF NOT EXISTS ${options.database}`;\n\n    const result = await connection.execute(query);\n\n    if (context.synchronize) {\n        await synchronizeDatabaseSchema(context.options);\n    }\n\n    return result;\n}\n\nexport async function dropOracleDatabase(\n    _context?: DatabaseDropContext,\n) {\n    /**\n     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/oracle/OracleQueryRunner.ts#L295\n     */\n\n    return Promise.resolve();\n}\n","import path from 'node:path';\nimport fs from 'node:fs';\nimport { OptionsError } from '../../errors';\nimport type { DatabaseCreateContext, DatabaseDropContext } from '../type';\nimport { buildDriverOptions } from './utils';\nimport { buildDatabaseCreateContext, buildDatabaseDropContext, synchronizeDatabaseSchema } from '../utils';\n\nexport async function createSQLiteDatabase(\n    context?: DatabaseCreateContext,\n) : Promise<void> {\n    context = await buildDatabaseCreateContext(context);\n\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    if (!options.database) {\n        throw OptionsError.databaseNotDefined();\n    }\n\n    const filePath : string = path.isAbsolute(options.database) ?\n        options.database :\n        path.join(process.cwd(), options.database);\n\n    const directoryPath : string = path.dirname(filePath);\n\n    await fs.promises.access(directoryPath, fs.constants.W_OK);\n\n    if (context.synchronize) {\n        await synchronizeDatabaseSchema(context.options);\n    }\n}\n\nexport async function dropSQLiteDatabase(\n    context: DatabaseDropContext,\n) {\n    context = await buildDatabaseDropContext(context);\n\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    const options = buildDriverOptions(context.options);\n    if (!options.database) {\n        throw OptionsError.databaseNotDefined();\n    }\n\n    const filePath : string = path.isAbsolute(options.database) ?\n        options.database :\n        path.join(process.cwd(), options.database);\n\n    try {\n        await fs.promises.access(filePath, fs.constants.F_OK | fs.constants.W_OK);\n        if (context.ifExist) {\n            await fs.promises.unlink(filePath);\n        }\n    } catch (e) {\n        // ...\n    }\n}\n","import { DriverError, OptionsError } from '../errors';\nimport type {\n    DatabaseCreateContext,\n} from './type';\nimport {\n    createCockroachDBDatabase,\n    createMongoDBDatabase,\n    createMsSQLDatabase,\n    createMySQLDatabase,\n    createOracleDatabase,\n    createPostgresDatabase,\n    createSQLiteDatabase,\n} from './driver';\nimport { buildDatabaseCreateContext } from './utils';\n\n/**\n * Create database for specified driver in ConnectionOptions.\n *\n * @throws DriverError\n * @throws OptionsError\n *\n * @param context\n */\nexport async function createDatabase(context?: DatabaseCreateContext) {\n    context = await buildDatabaseCreateContext(context);\n\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    if (!context.options.type) {\n        throw DriverError.undeterminable();\n    }\n\n    switch (context.options.type) {\n        case 'mongodb':\n            return createMongoDBDatabase(context);\n        case 'mysql':\n        case 'mariadb':\n            return createMySQLDatabase(context);\n        case 'postgres':\n            return createPostgresDatabase(context);\n        case 'cockroachdb':\n            return createCockroachDBDatabase(context);\n        case 'sqlite':\n        case 'better-sqlite3':\n            return createSQLiteDatabase(context);\n        case 'oracle':\n            return createOracleDatabase(context);\n        case 'mssql':\n            return createMsSQLDatabase(context);\n    }\n\n    throw DriverError.notSupported(context.options.type);\n}\n","import { DriverError, OptionsError } from '../errors';\nimport type {\n    DatabaseDropContext,\n} from './type';\nimport {\n    dropCockroachDBDatabase,\n    dropMongoDBDatabase,\n    dropMsSQLDatabase,\n    dropMySQLDatabase,\n    dropOracleDatabase,\n    dropPostgresDatabase,\n    dropSQLiteDatabase,\n} from './driver';\nimport { buildDatabaseDropContext } from './utils';\n\n/**\n * Drop database for specified driver in ConnectionOptions.\n *\n * @throws DriverError\n * @throws OptionsError\n *\n * @param context\n */\nexport async function dropDatabase(context?: DatabaseDropContext) {\n    context = await buildDatabaseDropContext(context);\n\n    if (!context.options) {\n        throw OptionsError.undeterminable();\n    }\n\n    if (!context.options.type) {\n        throw DriverError.undeterminable();\n    }\n\n    switch (context.options.type) {\n        case 'mongodb':\n            return dropMongoDBDatabase(context);\n        case 'mysql':\n        case 'mariadb':\n            return dropMySQLDatabase(context);\n        case 'postgres':\n            return dropPostgresDatabase(context);\n        case 'cockroachdb':\n            return dropCockroachDBDatabase(context);\n        case 'sqlite':\n        case 'better-sqlite3':\n            return dropSQLiteDatabase(context);\n        case 'oracle':\n            return dropOracleDatabase(context);\n        case 'mssql':\n            return dropMsSQLDatabase(context);\n    }\n\n    throw DriverError.notSupported(context.options.type);\n}\n","import { consola } from 'consola';\nimport type { Arguments, Argv, CommandModule } from 'yargs';\nimport { buildDataSourceOptions } from '../../../data-source';\nimport type { DatabaseCreateContext } from '../../../database';\nimport { createDatabase } from '../../../database';\nimport {\n    adjustFilePath,\n    parseFilePath,\n    readTSConfig,\n    resolveFilePath,\n} from '../../../utils';\nimport type { TSConfig } from '../../../utils';\n\nexport interface DatabaseCreateArguments extends Arguments {\n    preserveFilePaths: boolean,\n    root: string;\n    tsconfig: string,\n    dataSource: string;\n    synchronize: string;\n    initialDatabase?: unknown;\n}\n\nexport class DatabaseCreateCommand implements CommandModule {\n    command = 'db:create';\n\n    describe = 'Create database.';\n\n    builder(args: Argv) {\n        return args\n            .option('preserveFilePaths', {\n                default: false,\n                type: 'boolean',\n                describe: 'This option indicates if file paths should be preserved.',\n            })\n            .option('root', {\n                alias: 'r',\n                default: process.cwd(),\n                describe: 'Root directory of the project.',\n            })\n            .option('tsconfig', {\n                alias: 'tc',\n                default: 'tsconfig.json',\n                describe: 'Name (or relative path incl. name) of the tsconfig file.',\n            })\n            .option('dataSource', {\n                alias: 'd',\n                default: 'data-source',\n                describe: 'Name (or relative path incl. name) of the data-source file.',\n            })\n            .option('synchronize', {\n                alias: 's',\n                default: 'yes',\n                describe: 'Create database schema for all entities.',\n                choices: ['yes', 'no'],\n            })\n            .option('initialDatabase', {\n                describe: 'Specify the initial database to connect to.',\n            });\n    }\n\n    async handler(raw: Arguments) {\n        const args : DatabaseCreateArguments = raw as DatabaseCreateArguments;\n\n        let tsconfig : TSConfig | undefined;\n        let sourcePath = resolveFilePath(args.dataSource, args.root);\n        if (!args.preserveFilePaths) {\n            tsconfig = await readTSConfig(resolveFilePath(args.root, args.tsconfig));\n            sourcePath = await adjustFilePath(sourcePath, tsconfig);\n        }\n\n        const source = parseFilePath(sourcePath);\n\n        consola.info(`DataSource Directory: ${source.directory}`);\n        consola.info(`DataSource Name: ${source.name}`);\n\n        const dataSourceOptions = await buildDataSourceOptions({\n            directory: source.directory,\n            dataSourceName: source.name,\n            tsconfig,\n            preserveFilePaths: args.preserveFilePaths,\n        });\n\n        const context : DatabaseCreateContext = {\n            ifNotExist: true,\n            options: dataSourceOptions,\n        };\n\n        if (\n            typeof args.initialDatabase === 'string' &&\n            args.initialDatabase !== ''\n        ) {\n            context.initialDatabase = args.initialDatabase;\n        }\n\n        context.synchronize = args.synchronize === 'yes';\n\n        try {\n            await createDatabase(context);\n            consola.success('Created database.');\n            process.exit(0);\n        } catch (e) {\n            consola.warn('Failed to create database.');\n            consola.error(e);\n            process.exit(1);\n        }\n    }\n}\n","import { consola } from 'consola';\nimport type { Arguments, Argv, CommandModule } from 'yargs';\nimport { buildDataSourceOptions } from '../../../data-source';\nimport type { DatabaseDropContext } from '../../../database';\nimport { dropDatabase } from '../../../database';\nimport {\n    adjustFilePath,\n    parseFilePath,\n    readTSConfig,\n    resolveFilePath,\n} from '../../../utils';\nimport type { TSConfig } from '../../../utils';\n\nexport interface DatabaseDropArguments extends Arguments {\n    preserveFilePaths: boolean,\n    root: string;\n    tsconfig: string,\n    dataSource: string;\n}\n\nexport class DatabaseDropCommand implements CommandModule {\n    command = 'db:drop';\n\n    describe = 'Drop database.';\n\n    builder(args: Argv) {\n        return args\n            .option('preserveFilePaths', {\n                default: false,\n                type: 'boolean',\n                describe: 'This option indicates if file paths should be preserved.',\n            })\n            .option('root', {\n                alias: 'r',\n                default: process.cwd(),\n                describe: 'Root directory of the project.',\n            })\n            .option('tsconfig', {\n                alias: 'tc',\n                default: 'tsconfig.json',\n                describe: 'Name (or relative path incl. name) of the tsconfig file.',\n            })\n            .option('dataSource', {\n                alias: 'd',\n                default: 'data-source',\n                describe: 'Name (or relative path incl. name) of the data-source file.',\n            })\n            .option('initialDatabase', {\n                describe: 'Specify the initial database to connect to.',\n            });\n    }\n\n    async handler(raw: Arguments) {\n        const args : DatabaseDropArguments = raw as DatabaseDropArguments;\n\n        let tsconfig : TSConfig | undefined;\n        let sourcePath = resolveFilePath(args.dataSource, args.root);\n        if (!args.preserveFilePaths) {\n            tsconfig = await readTSConfig(resolveFilePath(args.root, args.tsconfig));\n            sourcePath = await adjustFilePath(sourcePath, tsconfig);\n        }\n\n        const source = parseFilePath(sourcePath);\n\n        consola.info(`DataSource Directory: ${source.directory}`);\n        consola.info(`DataSource Name: ${source.name}`);\n\n        const dataSourceOptions = await buildDataSourceOptions({\n            directory: source.directory,\n            dataSourceName: source.name,\n            tsconfig,\n            preserveFilePaths: args.preserveFilePaths,\n        });\n\n        const context : DatabaseDropContext = {\n            ifExist: true,\n            options: dataSourceOptions,\n        };\n\n        if (\n            typeof args.initialDatabase === 'string' &&\n            args.initialDatabase !== ''\n        ) {\n            context.initialDatabase = args.initialDatabase;\n        }\n\n        try {\n            await dropDatabase(context);\n            consola.success('Dropped database.');\n            process.exit(0);\n        } catch (e) {\n            consola.warn('Failed to drop database.');\n            consola.error(e);\n            process.exit(1);\n        }\n    }\n}\n","import type { Seeder, SeederConstructor } from './type';\n\nexport class SeederEntity {\n    /**\n     * ID of the seeder.\n     *\n     * Indicates order of the executed seeders.\n     */\n    id?: number;\n\n    /**\n     * Timestamp of the seeder.\n     */\n    timestamp: number;\n\n    /**\n     * Name of the seeder (class name).\n     */\n    name: string;\n\n    /**\n     * Instance of seeder constructor.\n     */\n    instance?: Seeder;\n\n    /**\n     * File name of the seeder.\n     */\n    fileName?: string;\n\n    /**\n     * File path of the seeder.\n     */\n    filePath?: string;\n\n    /**\n     * Result of the executed seeder.\n     */\n    result?: unknown;\n\n    constructor(ctx: {\n        id?: number,\n        timestamp: number,\n        name: string,\n        constructor?: SeederConstructor,\n        fileName?: string,\n        filePath?: string\n    }) {\n        this.id = ctx.id;\n        this.timestamp = ctx.timestamp;\n        this.name = ctx.name;\n\n        if (ctx.constructor) {\n            this.instance = new ctx.constructor();\n        }\n\n        this.fileName = ctx.fileName;\n        this.filePath = ctx.filePath;\n    }\n\n    get trackExecution() : boolean | undefined {\n        if (typeof this.instance === 'undefined') {\n            return undefined;\n        }\n\n        return this.instance.track;\n    }\n}\n","import type { FakerOptions, LocaleDefinition } from '@faker-js/faker';\nimport { Faker } from '@faker-js/faker';\nimport type { SaveOptions } from 'typeorm';\nimport { isObject, load } from 'locter';\nimport type { SeederFactoryContext } from './type';\nimport { hasOwnProperty, isPromise } from '../../utils';\nimport { useDataSource } from '../../data-source';\n\nexport class SeederFactory<O extends Record<string, any>, Meta = unknown> {\n    public readonly context: SeederFactoryContext<O, Meta>;\n\n    public meta: Meta | undefined;\n\n    protected faker : Faker | undefined;\n\n    protected locale : string[] | undefined;\n\n    // --------------------------------------------------------------\n\n    constructor(context: SeederFactoryContext<O, Meta>) {\n        this.context = context;\n    }\n\n    // --------------------------------------------------------------\n\n    public setMeta(value: Meta) {\n        this.meta = value;\n\n        return this;\n    }\n\n    public setLocale(value: string | string[]) {\n        this.faker = undefined;\n\n        this.locale = Array.isArray(value) ?\n            value :\n            [value];\n    }\n\n    // --------------------------------------------------------------\n\n    public async make(params?: Partial<O>, save?: boolean) {\n        const faker = await this.useFaker();\n        const factoryFn = this.context.factoryFn(faker, this.meta);\n        let entity : O;\n        if (isPromise(factoryFn)) {\n            entity = await this.resolve(await factoryFn, save);\n        } else {\n            entity = await this.resolve(factoryFn, save);\n        }\n\n        if (params) {\n            const keys : (keyof O)[] = Object.keys(params);\n            for (let i = 0; i < keys.length; i++) {\n                entity[keys[i]] = (params as O)[keys[i]];\n            }\n        }\n\n        return entity;\n    }\n\n    // --------------------------------------------------------------\n\n    public async save(\n        params?: Partial<O>,\n        options?: SaveOptions,\n    ) : Promise<O> {\n        const dataSource = await useDataSource();\n\n        const entity = await this.make(params, true);\n        const entityManager = dataSource.getRepository(this.context.entity);\n\n        return entityManager.save(entity, options);\n    }\n\n    public async saveMany(\n        amount: number,\n        params?: Partial<O>,\n        options?: SaveOptions,\n    ) : Promise<O[]> {\n        const items : O[] = [];\n        for (let i = 0; i < amount; i++) {\n            const item = await this.save(params, options);\n            items.push(item);\n        }\n\n        return items;\n    }\n\n    // --------------------------------------------------------------\n\n    private async resolve(entity: O, save?: boolean) : Promise<O> {\n        const keys = Object.keys(entity);\n        for (let i = 0; i < keys.length; i++) {\n            const key : keyof O = keys[i];\n            const value : O[keyof O] = entity[key];\n\n            if (!hasOwnProperty(entity, key)) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            if (\n                typeof value === 'object' &&\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                value instanceof SeederFactory\n            ) {\n                if (save) {\n                    entity[key] = await (value as SeederFactory<any>).save();\n                } else {\n                    entity[key] = await (value as SeederFactory<any>).make();\n                }\n            }\n\n            if (\n                value &&\n                hasOwnProperty(value, 'then') &&\n                typeof value.then === 'function'\n            ) {\n                entity[key] = await value;\n            }\n        }\n\n        return entity;\n    }\n\n    protected async useFaker() : Promise<Faker> {\n        if (typeof this.faker !== 'undefined') {\n            return this.faker;\n        }\n\n        const options : FakerOptions = {\n            locale: [],\n        };\n\n        const fakerExports = await load('@faker-js/faker');\n\n        let names : string[];\n        if (this.locale) {\n            names = Array.isArray(this.locale) ?\n                this.locale :\n                [this.locale];\n        } else {\n            names = ['en'];\n        }\n\n        for (let i = 0; i < names.length; i++) {\n            if (\n                hasOwnProperty(fakerExports, 'default') &&\n                isObject(fakerExports.default) &&\n                hasOwnProperty(fakerExports.default, names[i])\n            ) {\n                (options.locale as LocaleDefinition[]).push(fakerExports.default[names[i]] as LocaleDefinition);\n                continue;\n            }\n\n            if (hasOwnProperty(fakerExports, names[i])) {\n                (options.locale as LocaleDefinition[]).push(fakerExports[names[i]] as LocaleDefinition);\n            }\n        }\n\n        this.faker = new Faker(options);\n\n        return this.faker;\n    }\n}\n","import type { EntitySchema, ObjectType } from 'typeorm';\nimport type { FactoryCallback, SeederFactoryItem } from './type';\nimport { getEntityName, hasOwnProperty } from '../../utils';\nimport { SeederFactory } from './module';\n\nexport class SeederFactoryManager {\n    public readonly items : Record<string, SeederFactoryItem> = {};\n\n    set<O extends Record<string, any>, Meta = unknown>(\n        entity: ObjectType<O> | EntitySchema<O>,\n        factoryFn: FactoryCallback<O, Meta>,\n    ) : SeederFactoryItem {\n        const name = getEntityName(entity);\n\n        this.items[name] = {\n            factoryFn,\n            entity,\n        };\n\n        return this.items[name];\n    }\n\n    get<O extends Record<string, any>, Meta = unknown>(\n        entity: ObjectType<O> | EntitySchema<O>,\n    ) : SeederFactory<O, Meta> {\n        const name = getEntityName(entity);\n\n        if (!hasOwnProperty(this.items, name)) {\n            throw new Error(`No seeder factory is registered for the entity: ${name}`);\n        }\n\n        return new SeederFactory({\n            factoryFn: this.items[name].factoryFn,\n            entity,\n            name,\n        });\n    }\n}\n","/* istanbul ignore next */\nimport type { LocatorInfo } from 'locter';\nimport { locateMany } from 'locter';\nimport path from 'node:path';\n\nexport async function resolveFilePatterns(\n    filesPattern: string[],\n    root?: string,\n) : Promise<string[]> {\n    return locateMany(\n        filesPattern,\n        {\n            ...(root ? { path: root } : {}),\n            ignore: ['**/*.d.ts'],\n        },\n    ).then(buildFilePathname);\n}\n\nexport function resolveFilePaths(\n    filePaths: string[],\n    root?: string,\n) {\n    return filePaths.map((filePath) => (\n        path.isAbsolute(filePath) ?\n            filePath :\n            path.resolve(root || process.cwd(), filePath)\n    ));\n}\n\n/**\n * Exported only for testing purposes\n */\nexport function buildFilePathname(files: LocatorInfo[]) {\n    return (\n        // sorting by name so that we can define the order of execution using file names\n        files.sort((a, b) => (a.name > b.name ? 1 : -1)).map((el) => path.join(el.path, el.name + el.extension))\n    );\n}\n","import { load } from 'locter';\nimport path from 'node:path';\nimport type { SeederConstructor, SeederPrepareElement } from '../type';\nimport { resolveFilePaths, resolveFilePatterns } from './file-path';\n\nexport async function prepareSeederSeeds(\n    input: SeederConstructor[] | string[],\n    root?: string,\n): Promise<SeederPrepareElement[]> {\n    const items: SeederPrepareElement[] = [];\n\n    let seedFiles: string[] = [];\n    const seedConstructors: SeederConstructor[] = [];\n\n    for (let i = 0; i < input.length; i++) {\n        const value = input[i];\n        if (typeof value === 'string') {\n            seedFiles.push(value);\n        } else {\n            seedConstructors.push(value);\n        }\n    }\n\n    if (seedFiles.length > 0) {\n        seedFiles = await resolveFilePatterns(seedFiles, root);\n        seedFiles = resolveFilePaths(seedFiles, root);\n\n        for (let i = 0; i < seedFiles.length; i++) {\n            const moduleExports = await load(seedFiles[i]);\n\n            let clazzConstructor : SeederConstructor | undefined;\n\n            const exportKeys = Object.keys(moduleExports);\n            for (let j = 0; j < exportKeys.length; j++) {\n                const moduleExport = moduleExports[exportKeys[j]];\n                if (\n                    typeof moduleExport === 'function' &&\n                    moduleExport.prototype\n                ) {\n                    clazzConstructor = moduleExport;\n                }\n            }\n\n            if (clazzConstructor) {\n                const fileName = path.basename(seedFiles[i]);\n                const filePath = seedFiles[i];\n                const match = fileName.match(/^([0-9]{13,})-(.*)$/);\n\n                let timestamp : number | undefined;\n                if (match) {\n                    timestamp = parseInt(match[1], 10);\n                }\n\n                items.push({\n                    constructor: clazzConstructor,\n                    fileName,\n                    filePath,\n                    ...(timestamp ? { timestamp } : {}),\n                });\n            }\n        }\n    }\n\n    if (seedConstructors.length > 0) {\n        for (let i = 0; i < seedConstructors.length; i++) {\n            items.push({\n                constructor: seedConstructors[i],\n            });\n        }\n    }\n\n    return items;\n}\n","import { pascalCase } from 'pascal-case';\n\nexport function buildSeederFileTemplate(\n    name: string,\n    timestamp: number,\n): string {\n    const className = `${pascalCase(name)}${timestamp}`;\n\n    return `import { DataSource } from 'typeorm';\nimport { Seeder, SeederFactoryManager } from 'typeorm-extension';\n\nexport class ${className} implements Seeder {\n    track = false;\n\n    public async run(\n        dataSource: DataSource,\n        factoryManager: SeederFactoryManager\n    ): Promise<any> {\n\n    }\n}\n`;\n}\n","import { load } from 'locter';\nimport type { EntitySchema, ObjectType } from 'typeorm';\nimport { resolveFilePaths, resolveFilePatterns } from '../utils';\nimport { SeederFactoryManager } from './manager';\nimport type { FactoryCallback, SeederFactoryItem } from './type';\n\nlet instance : SeederFactoryManager | undefined;\n\nexport function useSeederFactoryManager() {\n    if (typeof instance !== 'undefined') {\n        return instance;\n    }\n\n    instance = new SeederFactoryManager();\n\n    return instance;\n}\n\nexport function setSeederFactory<O extends Record<string, any>, Meta = unknown>(\n    entity: ObjectType<O> | EntitySchema<O>,\n    factoryFn: FactoryCallback<O, Meta>,\n) : SeederFactoryItem {\n    const manager = useSeederFactoryManager();\n    return manager.set(entity, factoryFn);\n}\n\nexport function useSeederFactory<O extends Record<string, any>>(\n    entity: ObjectType<O> | EntitySchema<O>,\n) {\n    const manager = useSeederFactoryManager();\n    return manager.get(entity);\n}\n\nexport async function prepareSeederFactories(\n    items: SeederFactoryItem[] | string[],\n    root?: string,\n) {\n    let factoryFiles: string[] = [];\n    const factoryConfigs: SeederFactoryItem[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n        const value = items[i];\n        if (typeof value === 'string') {\n            factoryFiles.push(value);\n        } else {\n            factoryConfigs.push(value);\n        }\n    }\n\n    if (factoryFiles.length > 0) {\n        factoryFiles = await resolveFilePatterns(factoryFiles, root);\n        factoryFiles = resolveFilePaths(factoryFiles, root);\n\n        for (let i = 0; i < factoryFiles.length; i++) {\n            await load(factoryFiles[i]);\n        }\n    }\n\n    if (factoryConfigs.length > 0) {\n        const factoryManager = useSeederFactoryManager();\n\n        for (let i = 0; i < factoryConfigs.length; i++) {\n            factoryManager.set(\n                factoryConfigs[i].entity,\n                factoryConfigs[i].factoryFn,\n            );\n        }\n    }\n}\n","import { isObject } from 'locter';\nimport type { ObjectLiteral } from 'rapiq';\nimport { MssqlParameter, Table } from 'typeorm';\nimport type { DataSource, DataSourceOptions, QueryRunner } from 'typeorm';\nimport type { MongoQueryRunner } from 'typeorm/driver/mongodb/MongoQueryRunner';\nimport { setDataSource } from '../data-source';\nimport { useEnv } from '../env';\nimport { adjustFilePaths, readTSConfig, resolveFilePath } from '../utils';\nimport type { TSConfig } from '../utils';\nimport { SeederEntity } from './entity';\nimport { prepareSeederFactories, useSeederFactoryManager } from './factory';\nimport type { SeederExecutorOptions, SeederOptions, SeederPrepareElement } from './type';\nimport { prepareSeederSeeds } from './utils';\n\nexport class SeederExecutor {\n    protected dataSource : DataSource;\n\n    protected options : SeederExecutorOptions;\n\n    private readonly tableName: string;\n\n    constructor(dataSource: DataSource, options?: SeederExecutorOptions) {\n        this.dataSource = dataSource;\n        this.options = options || {};\n\n        setDataSource(dataSource);\n\n        this.tableName = this.dataSourceOptions.seedTableName || 'seeds';\n    }\n\n    async execute(input: SeederOptions = {}) : Promise<SeederEntity[]> {\n        const options = await this.buildOptions(input);\n        if (!options.seeds || options.seeds.length === 0) {\n            return [];\n        }\n\n        if (options.factories) {\n            await prepareSeederFactories(options.factories, this.options.root);\n        }\n\n        const seederElements = await prepareSeederSeeds(\n            options.seeds,\n            this.options.root,\n        );\n        const all = await this.buildEntities(seederElements);\n\n        let tracking = !!options.seedTracking;\n        if (!tracking) {\n            tracking = all.some((seed) => !!seed.trackExecution);\n        }\n\n        let queryRunner : QueryRunner | undefined;\n        let existing : SeederEntity[] = [];\n\n        if (tracking) {\n            queryRunner = this.dataSource.createQueryRunner();\n            await this.createTableIfNotExist(queryRunner);\n            existing = await this.loadExisting(queryRunner);\n        }\n\n        const isMatch = (seed: SeederEntity) : boolean => {\n            if (!options.seedName) {\n                return true;\n            }\n\n            if (\n                seed.name === options.seedName ||\n                seed.fileName === options.seedName\n            ) {\n                return true;\n            }\n\n            if (!seed.filePath) {\n                return false;\n            }\n\n            if (seed.filePath === options.seedName) {\n                return true;\n            }\n\n            return resolveFilePath(options.seedName, this.options.root) === seed.filePath;\n        };\n\n        const pending = all.filter((seed) => {\n            if (!isMatch(seed)) {\n                return false;\n            }\n\n            const index = existing.findIndex(\n                (el) => el.name === seed.name,\n            );\n\n            if (index === -1) {\n                return true;\n            }\n\n            let seedTracking : boolean | undefined;\n            if (typeof seed.trackExecution !== 'undefined') {\n                seedTracking = seed.trackExecution;\n            } else {\n                seedTracking = options.seedTracking;\n            }\n\n            return !seedTracking;\n        });\n\n        if (pending.length === 0) {\n            if (queryRunner) {\n                await queryRunner.release();\n            }\n\n            return [];\n        }\n\n        this.dataSource.logger.logSchemaBuild(\n            `${existing.length} seeds are already present in the database.`,\n        );\n        this.dataSource.logger.logSchemaBuild(\n            `${all.length} seeds were found in the source code.`,\n        );\n\n        const factoryManager = useSeederFactoryManager();\n\n        const executed : SeederEntity[] = [];\n\n        try {\n            for (let i = 0; i < pending.length; i++) {\n                const seeder = pending[i].instance;\n                if (!seeder) {\n                    continue;\n                }\n\n                pending[i].result = await seeder.run(this.dataSource, factoryManager);\n\n                let seedTracking : boolean | undefined;\n                if (typeof pending[i].trackExecution !== 'undefined') {\n                    seedTracking = pending[i].trackExecution;\n                } else {\n                    seedTracking = options.seedTracking;\n                }\n\n                if (queryRunner && seedTracking) {\n                    await this.track(queryRunner, pending[i]);\n                }\n\n                this.dataSource.logger.logSchemaBuild(\n                    `Seed ${pending[i].name} has been executed successfully.`,\n                );\n\n                executed.push(pending[i]);\n            }\n        } finally {\n            if (queryRunner) {\n                await queryRunner.release();\n            }\n        }\n\n        return executed;\n    }\n\n    protected async loadExisting(queryRunner: QueryRunner) : Promise<SeederEntity[]> {\n        if (this.dataSource.driver.options.type === 'mongodb') {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n\n            return mongoRunner\n                .cursor(this.tableName, {})\n                .sort({ _id: -1 })\n                .toArray();\n        }\n\n        const raw: ObjectLiteral[] = await this.dataSource.manager\n            .createQueryBuilder(queryRunner)\n            .select()\n            .orderBy(this.dataSource.driver.escape('id'), 'DESC')\n            .from(this.table, this.tableName)\n            .getRawMany();\n\n        return raw.map((migrationRaw) => new SeederEntity({\n            id: parseInt(migrationRaw.id, 10),\n            timestamp: parseInt(migrationRaw.timestamp, 10),\n            name: migrationRaw.name,\n            constructor: undefined,\n        }));\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected async buildEntities(seeds?: SeederPrepareElement[]): Promise<SeederEntity[]> {\n        if (!seeds) {\n            return [];\n        }\n\n        let timestampCounter = 0;\n        const entities = seeds.map((element) => {\n            const {\n                constructor: seed,\n                fileName,\n                filePath,\n            } = element;\n\n            let {\n                timestamp,\n            } = element;\n\n            const className = seed.name || (seed.constructor as any).name;\n\n            if (!timestamp) {\n                timestamp = this.classNameToTimestamp(className);\n            }\n\n            const entity = new SeederEntity({\n                fileName,\n                filePath,\n                timestamp: timestamp || timestampCounter,\n                name: className,\n                constructor: seed,\n            });\n\n            timestampCounter++;\n\n            return entity;\n        });\n\n        this.checkForDuplicates(entities);\n\n        // sort them by file name than by timestamp\n        return entities.sort((a, b) => {\n            if (\n                typeof a.fileName !== 'undefined' &&\n                typeof b.fileName !== 'undefined'\n            ) {\n                return a.fileName > b.fileName ? 1 : -1;\n            }\n\n            return a.timestamp - b.timestamp;\n        });\n    }\n\n    protected checkForDuplicates(entities: SeederEntity[]) {\n        const names = entities.map((migration) => migration.name);\n        const duplicates = Array.from(\n            new Set(\n                names.filter(\n                    (migrationName, index) => names.indexOf(migrationName) < index,\n                ),\n            ),\n        );\n        if (duplicates.length > 0) {\n            throw Error(`Duplicate seeds: ${duplicates.join(', ')}`);\n        }\n    }\n\n    protected async createTableIfNotExist(queryRunner: QueryRunner) {\n        // If driver is mongo no need to create\n        if (this.dataSource.driver.options.type === 'mongodb') {\n            return;\n        }\n        const tableExist = await queryRunner.hasTable(this.table);\n        if (!tableExist) {\n            await queryRunner.createTable(\n                new Table({\n                    database: this.database,\n                    schema: this.schema,\n                    name: this.table,\n                    columns: [\n                        {\n                            name: 'id',\n                            type: this.dataSource.driver.normalizeType({\n                                type: this.dataSource.driver.mappedDataTypes\n                                    .migrationId,\n                            }),\n                            isGenerated: true,\n                            generationStrategy: 'increment',\n                            isPrimary: true,\n                            isNullable: false,\n                        },\n                        {\n                            name: 'timestamp',\n                            type: this.dataSource.driver.normalizeType({\n                                type: this.dataSource.driver.mappedDataTypes\n                                    .migrationTimestamp,\n                            }),\n                            isPrimary: false,\n                            isNullable: false,\n                        },\n                        {\n                            name: 'name',\n                            type: this.dataSource.driver.normalizeType({\n                                type: this.dataSource.driver.mappedDataTypes\n                                    .migrationName,\n                            }),\n                            isNullable: false,\n                        },\n                    ],\n                }),\n            );\n        }\n    }\n\n    protected async track(\n        queryRunner: QueryRunner,\n        seederEntity: SeederEntity,\n    ): Promise<void> {\n        const values: ObjectLiteral = {};\n        if (this.dataSource.driver.options.type === 'mssql') {\n            values.timestamp = new MssqlParameter(\n                seederEntity.timestamp,\n                this.dataSource.driver.normalizeType({\n                    type: this.dataSource.driver.mappedDataTypes\n                        .migrationTimestamp,\n                }) as any,\n            );\n            values.name = new MssqlParameter(\n                seederEntity.name,\n                this.dataSource.driver.normalizeType({\n                    type: this.dataSource.driver.mappedDataTypes.migrationName,\n                }) as any,\n            );\n        } else {\n            values.timestamp = seederEntity.timestamp;\n            values.name = seederEntity.name;\n        }\n\n        if (this.dataSource.driver.options.type === 'mongodb') {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            await mongoRunner.databaseConnection\n                .db(this.dataSource.driver.database)\n                .collection(this.tableName)\n                .insertOne(values);\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb\n                .insert()\n                .into(this.table)\n                .values(values)\n                .execute();\n        }\n    }\n\n    protected get dataSourceOptions() : DataSourceOptions & SeederOptions {\n        return this.dataSource.options;\n    }\n\n    protected get database() {\n        return this.dataSource.driver.database;\n    }\n\n    protected get schema() {\n        return this.dataSource.driver.schema;\n    }\n\n    protected get table() {\n        return this.dataSource.driver.buildTableName(\n            this.tableName,\n            this.schema,\n            this.database,\n        );\n    }\n\n    protected async buildOptions(input: SeederOptions = {}) {\n        const options : SeederOptions = {\n            ...input,\n            seeds: input.seeds || [],\n            factories: input.factories || [],\n            seedTracking: input.seedTracking ?? false,\n        };\n\n        if (!options.seeds || options.seeds.length === 0) {\n            options.seeds = this.dataSourceOptions.seeds;\n        }\n\n        if (!options.seeds || options.seeds.length === 0) {\n            options.seeds = useEnv('seeds');\n        }\n\n        if (!options.seeds || options.seeds.length === 0) {\n            options.seeds = ['src/database/seeds/**/*{.ts,.js}'];\n        }\n\n        if (!options.factories || options.factories.length === 0) {\n            options.factories = this.dataSourceOptions.factories;\n        }\n\n        if (!options.factories || options.factories.length === 0) {\n            options.factories = useEnv('factories');\n        }\n\n        if (!options.factories || options.factories.length === 0) {\n            options.factories = ['src/database/factories/**/*{.ts,.js}'];\n        }\n\n        if (typeof options.seedTracking === 'undefined') {\n            options.seedTracking = this.dataSourceOptions.seedTracking;\n        }\n\n        if (!this.options.preserveFilePaths) {\n            let tsConfig : TSConfig;\n\n            if (isObject(this.options.tsconfig)) {\n                tsConfig = this.options.tsconfig;\n            } else {\n                tsConfig = await readTSConfig(\n                    resolveFilePath(this.options.tsconfig || 'tsconfig.json', this.options.root),\n                );\n            }\n\n            await adjustFilePaths(\n                options,\n                [\n                    'seeds',\n                    'seedName',\n                    'factories',\n                ],\n                tsConfig,\n            );\n        }\n\n        return options;\n    }\n\n    protected classNameToTimestamp(className: string) {\n        const match = className.match(/^(.*)([0-9]{13,})$/);\n        if (match) {\n            return parseInt(match[2], 10);\n        }\n\n        return undefined;\n    }\n}\n","import type { DataSource } from 'typeorm';\nimport type { SeederEntity } from './entity';\nimport { SeederExecutor } from './executor';\nimport type { SeederConstructor, SeederOptions } from './type';\n\nexport async function runSeeder(\n    dataSource: DataSource,\n    seeder: SeederConstructor | string,\n    options: SeederOptions = {},\n) : Promise<SeederEntity | undefined> {\n    if (typeof seeder === 'string') {\n        options.seedName = seeder;\n    } else {\n        options.seeds = [seeder];\n    }\n\n    const executor = new SeederExecutor(dataSource);\n    const output = await executor.execute(options);\n\n    return output.pop();\n}\n\nexport async function runSeeders(\n    dataSource: DataSource,\n    options?: SeederOptions,\n) : Promise<SeederEntity[]> {\n    const executor = new SeederExecutor(dataSource);\n    return executor.execute(options);\n}\n","import { getFileNameExtension, removeFileNameExtension } from 'locter';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { pascalCase } from 'pascal-case';\nimport type { Arguments, Argv, CommandModule } from 'yargs';\nimport { consola } from 'consola';\nimport { buildSeederFileTemplate } from '../../../seeder';\nimport { isDirectory, parseFilePath } from '../../../utils';\n\nexport interface SeedCreateArguments extends Arguments {\n    root: string;\n    javascript: boolean;\n    timestamp?: number,\n    name: string\n}\n\nexport class SeedCreateCommand implements CommandModule {\n    command = 'seed:create';\n\n    describe = 'Create a seeder file.';\n\n    builder(args: Argv) {\n        return args\n            .option('root', {\n                alias: 'r',\n                default: process.cwd(),\n                describe: 'Root directory of the project.',\n            })\n            .option('timestamp', {\n                alias: 't',\n                type: 'number',\n                describe: 'Custom timestamp for the seeder name.',\n            })\n            .option('javascript', {\n                alias: 'j',\n                type: 'boolean',\n                default: false,\n                describe: 'Generate a seeder file for JavaScript instead of TypeScript.',\n            })\n            .option('name', {\n                alias: 'n',\n                describe: 'Name (or relative path incl. name) of the seeder.',\n                demandOption: true,\n            });\n    }\n\n    async handler(raw: Arguments) {\n        const args = raw as SeedCreateArguments;\n\n        let timestamp : number;\n        if (Number.isNaN(args.timestamp) || !args.timestamp) {\n            timestamp = Date.now();\n        } else {\n            timestamp = args.timestamp;\n        }\n\n        const sourcePath = parseFilePath(args.name, args.root);\n\n        const dirNameIsDirectory = await isDirectory(sourcePath.directory);\n        if (!dirNameIsDirectory) {\n            consola.warn(`The output directory ${sourcePath.directory} does not exist.`);\n            process.exit(1);\n        }\n\n        const extension = args.javascript ?\n            '.js' :\n            '.ts';\n\n        const nameExtension = getFileNameExtension(sourcePath.name);\n        const nameWithoutExtension = removeFileNameExtension(sourcePath.name);\n\n        let fileName: string;\n        if (nameExtension) {\n            fileName = `${timestamp}-${sourcePath.name}`;\n        } else {\n            fileName = `${timestamp}-${sourcePath.name}${extension}`;\n        }\n        const filePath = sourcePath.directory + path.sep + fileName;\n        const template = buildSeederFileTemplate(nameWithoutExtension, timestamp);\n\n        consola.info(`Seed Directory: ${sourcePath.directory}`);\n        consola.info(`Seed FileName: ${fileName}`);\n        consola.info(`Seed Name: ${pascalCase(nameWithoutExtension)}`);\n\n        try {\n            await fs.promises.writeFile(filePath, template, { encoding: 'utf-8' });\n        } catch (e) {\n            consola.warn(`The seed could not be written to the path ${filePath}.`);\n            process.exit(1);\n        }\n\n        process.exit(0);\n    }\n}\n","import { consola } from 'consola';\nimport type { Arguments, Argv, CommandModule } from 'yargs';\nimport { buildDataSourceOptions, setDataSourceOptions, useDataSource } from '../../../data-source';\nimport { SeederExecutor } from '../../../seeder';\nimport {\n    adjustFilePath,\n    parseFilePath,\n    readTSConfig,\n    resolveFilePath,\n} from '../../../utils';\nimport type { TSConfig } from '../../../utils';\n\nexport interface SeedRunArguments extends Arguments {\n    preserveFilePaths: boolean,\n    root: string;\n    tsconfig: string,\n    dataSource: string;\n    name?: string,\n}\n\nexport class SeedRunCommand implements CommandModule {\n    command = 'seed:run';\n\n    describe = 'Populate the database with an initial data set or generated data by a factory.';\n\n    builder(args: Argv) {\n        return args\n            .option('preserveFilePaths', {\n                default: false,\n                type: 'boolean',\n                describe: 'This option indicates if file paths should be preserved.',\n            })\n            .option('root', {\n                alias: 'r',\n                default: process.cwd(),\n                describe: 'Root directory of the project.',\n            })\n            .option('tsconfig', {\n                alias: 'tc',\n                default: 'tsconfig.json',\n                describe: 'Name (or relative path incl. name) of the tsconfig file.',\n            })\n            .option('dataSource', {\n                alias: 'd',\n                default: 'data-source',\n                describe: 'Name (or relative path incl. name) of the data-source file.',\n            })\n            .option('name', {\n                alias: 'n',\n                describe: 'Name (or relative path incl. name) of the seeder.',\n            });\n    }\n\n    async handler(raw: Arguments) {\n        const args = raw as SeedRunArguments;\n\n        let tsconfig : TSConfig | undefined;\n        let sourcePath = resolveFilePath(args.dataSource, args.root);\n        if (!args.preserveFilePaths) {\n            tsconfig = await readTSConfig(args.root);\n            sourcePath = await adjustFilePath(sourcePath, tsconfig);\n            args.name = await adjustFilePath(args.name, tsconfig);\n        }\n\n        const source = parseFilePath(sourcePath);\n\n        consola.info(`DataSource Directory: ${source.directory}`);\n        consola.info(`DataSource Name: ${source.name}`);\n\n        const dataSourceOptions = await buildDataSourceOptions({\n            dataSourceName: source.name,\n            directory: source.directory,\n            tsconfig,\n            preserveFilePaths: args.preserveFilePaths,\n        });\n\n        setDataSourceOptions(dataSourceOptions);\n\n        if (args.name) {\n            consola.info(`Seed Name: ${args.name}`);\n        }\n\n        const dataSource = await useDataSource();\n        const executor = new SeederExecutor(dataSource, {\n            root: args.root,\n            tsconfig,\n            preserveFilePaths: args.preserveFilePaths,\n        });\n\n        await executor.execute({ seedName: args.name });\n\n        process.exit(0);\n    }\n}\n"],"names":["TypeormExtensionError","Error","DriverError","undeterminable","notSupported","driverName","constructor","message","OptionsError","notFound","databaseNotDefined","getAliasForPath","items","path","undefined","i","length","key","value","buildKeyWithPrefix","name","prefix","CodeTransformation","detectCodeTransformation","process","Symbol","for","JUST_IN_TIME","NONE","isCodeTransformation","input","getEntityName","entity","InstanceChecker","isEntitySchema","options","canReplaceWindowsSeparator","startsWith","characterIndex","specialCharacters","indexOf","replaceWindowSeparator","replace","safeReplaceWindowsSeparator","TRAILING_SLASH_RE","hasTrailingSlash","queryParams","endsWith","test","withoutTrailingSlash","slice","s0","s","split","join","readTSConfig","cwd","isAbsolute","resolve","filePath","tsConfig","load","isObject","e","stripLeadingModifier","text","substring","transformFilePath","dist","src","separator","sep","windowsSeparatorReplaceable","base","baseIndex","lastIndexOf","lastIndex","prevCharacter","jsExtensions","tsExtensions","regex","RegExp","matchesSum","matches","match","Array","isArray","matchesCounter","bracketIndex","args","adjustFilePath","tsconfig","compilerOptions","outDir","adjustFilePaths","keys","Object","resolveFilePath","root","parseFilePath","fullPath","directory","dirname","basename","isDirectory","stat","fs","promises","hasOwnProperty","obj","prop","prototype","call","hasStringProperty","isPromise","p","Promise","then","isQueryOptionDefined","option","applyQueryFieldsParseOutput","query","data","select","map","field","alias","relations","defaultAlias","defaultPath","applyQueryFields","parseQueryFields","applyFields","transformParsedFilters","fullKey","filter","statement","bindingKey","push","operator","FilterComparisonOperator","NOT_EQUAL","binding","EQUAL","LIKE","NOT_LIKE","IN","NOT_IN","nullIndex","splice","unshift","LESS_THAN","LESS_THAN_EQUAL","GREATER_THAN","GREATER_THAN_EQUAL","applyFiltersTransformed","andWhere","Brackets","qb","where","applyQueryFiltersParseOutput","applyQueryFilters","parseQueryFilters","applyFilters","applyQueryPaginationParseOutput","limit","take","offset","skip","applyQueryPagination","parseQueryPagination","applyPagination","applyQueryRelationsParseOutput","parts","leftJoinAndSelect","applyQueryRelations","parseQueryRelations","applyRelations","applyQuerySortParseOutput","sort","orderBy","applyQuerySort","parseQuerySort","applySort","applyQueryParseOutput","context","fields","filters","pagination","applyQuery","output","parseQuery","findDataSource","preserveFilePaths","files","fileName","removeFileNameExtension","directoryIsPattern","lookupPaths","j","posix","info","locate","ignore","moduleRecord","isDataSource","EnvironmentName","EnvironmentVariableName","transformLogging","toBool","toArray","transformCache","envCacheOptions","oneOf","read","CACHE_OPTIONS","CACHE_OPTIONS_ALT","JSON","parse","type","alwaysEnabled","readBool","CACHE_ALWAYS_ENABLED","CACHE_ALWAYS_ENABLED_ALT","duration","readInt","CACHE_DURATION","CACHE_DURATION_ALT","instance","useEnv","env","ENV","DEVELOPMENT","seeds","readArray","SEEDS","SEEDS_ALT","factories","FACTORIES","FACTORIES_ALT","url","URL","URL_ALT","host","HOST","HOST_ALT","port","PORT","PORT_ALT","username","USERNAME","USERNAME_ALT","password","PASSWORD","PASSWORD_ALT","database","DATABASE","DATABASE_ALT","sid","SID","SID_ALT","schema","SCHEMA","SCHEMA_ALT","extra","DRIVER_EXTRA","DRIVER_EXTRA_ALT","synchronize","SYNCHRONIZE","SYNCHRONIZE_ALT","schemaDrop","SCHEMA_DROP","SCHEMA_DROP_ALT","migrationsRun","MIGRATIONS_RUN","MIGRATIONS_RUN_ALT","entities","ENTITIES","ENTITIES_ALT","migrations","MIGRATIONS","MIGRATIONS_ALT","migrationsTableName","MIGRATIONS_TABLE_NAME","MIGRATIONS_TABLE_NAME_ALT","metadataTableName","METADATA_TABLE_NAME","METADATA_TABLE_NAME_ALT","subscribers","SUBSCRIBERS","SUBSCRIBERS_ALT","logging","LOGGING","LOGGING_ALT","logger","LOGGER","LOGGER_ALT","entityPrefix","ENTITY_PREFIX","ENTITY_PREFIX_ALT","maxQueryExecutionTime","MAX_QUERY_EXECUTION_TIME","MAX_QUERY_EXECUTION_TIME_ALT","debug","DEBUG","DEBUG_ALT","cache","CACHE","CACHE_ALT","uuidExtension","UUID_EXTENSION","UUID_EXTENSION_ALT","envType","TYPE","TYPE_ALT","envURL","resetEnv","merge","createMerger","strategy","target","mergeDataSourceOptions","source","hasEnvDataSourceOptions","readDataSourceOptionsFromEnv","dropSchema","credentialOptions","timeTravelQueries","mergeDataSourceOptionsWithEnv","buildDataSourceOptions","dataSource","dataSourceName","instances","instancePromises","setDataSourceOptions","hasDataSourceOptions","useDataSourceOptions","catch","initializePromises","optionsPromises","setDataSource","hasDataSource","unsetDataSource","useDataSource","isInitialized","initialize","DataSource","checkDatabase","dataSourceCleanup","result","exists","migrationsPending","dataSourceExisted","queryRunner","createQueryRunner","migrationExecutor","MigrationExecutor","getPendingMigrations","driver","buildTableName","migrationsTableExists","hasTable","entityMetadatas","tableNames","entityMetadata","tablePath","tables","getTables","release","destroy","getCharsetFromDataSourceOptions","charset","getCharacterSetFromDataSourceOptions","characterSet","buildDriverOptions","driverOptions","DriverUtils","replication","master","buildMongoDBDriverOptions","user","ssl","connectString","serviceName","domain","driversRequireDatabaseOption","createDriver","connectionOptions","fakeConnection","driverFactory","DriverFactory","create","setDatabaseContextOptions","findOptions","assign","buildDatabaseCreateContext","ifNotExist","buildDatabaseDropContext","ifExist","GenerateCommand","MigrationGenerateCommand","prettify","prettifyQuery","parameters","stringify","buildTemplate","timestamp","upStatements","downStatements","migrationName","pascalCase","up","down","generateMigration","Date","getTime","sqlInMemory","createSchemaBuilder","log","upQueries","forEach","upQuery","downQueries","downQuery","content","reverse","preview","directoryPath","access","constants","R_OK","W_OK","mkdir","recursive","writeFile","encoding","existsQuery","builder","inverse","getQuery","synchronizeDatabaseSchema","migrationsCount","runMigrations","transaction","migrationsTransactionMode","createSimplePostgresConnection","operationContext","Client","postgres","initialDatabase","client","connect","executeSimplePostgresQuery","connection","endConnection","reject","queryErr","queryResult","end","createPostgresDatabase","existQuery","existResult","rows","dropPostgresDatabase","executeSimpleCockroachDBQuery","createCockroachDBDatabase","dropCockroachDBDatabase","createSimpleMongoDBConnection","MongoClient","mongodb","createMongoDBDatabase","close","dropMongoDBDatabase","dropDatabase","createSimpleMsSQLConnection","server","mssql","createMsSQLDatabase","dropMsSQLDatabase","createSimpleMySQLConnection","createConnection","mysql","executeSimpleMysqlQuery","createMySQLDatabase","toLowerCase","dropMySQLDatabase","createSimpleOracleConnection","getConnection","oracle","address","connectData","createOracleDatabase","execute","dropOracleDatabase","_context","createSQLiteDatabase","dropSQLiteDatabase","F_OK","unlink","createDatabase","DatabaseCreateCommand","default","describe","choices","handler","raw","sourcePath","consola","dataSourceOptions","success","exit","warn","error","command","DatabaseDropCommand","SeederEntity","trackExecution","track","ctx","id","SeederFactory","setMeta","meta","setLocale","faker","locale","make","params","save","useFaker","factoryFn","entityManager","getRepository","saveMany","amount","item","fakerExports","names","Faker","SeederFactoryManager","set","get","resolveFilePatterns","filesPattern","locateMany","buildFilePathname","resolveFilePaths","filePaths","a","b","el","extension","prepareSeederSeeds","seedFiles","seedConstructors","moduleExports","clazzConstructor","exportKeys","moduleExport","parseInt","buildSeederFileTemplate","className","useSeederFactoryManager","setSeederFactory","manager","useSeederFactory","prepareSeederFactories","factoryFiles","factoryConfigs","factoryManager","SeederExecutor","buildOptions","seederElements","all","buildEntities","tracking","seedTracking","some","seed","existing","createTableIfNotExist","loadExisting","isMatch","seedName","pending","index","findIndex","logSchemaBuild","executed","seeder","run","mongoRunner","cursor","tableName","_id","createQueryBuilder","escape","from","table","getRawMany","migrationRaw","timestampCounter","element","classNameToTimestamp","checkForDuplicates","migration","duplicates","Set","tableExist","createTable","Table","columns","normalizeType","mappedDataTypes","migrationId","isGenerated","generationStrategy","isPrimary","isNullable","migrationTimestamp","seederEntity","values","MssqlParameter","databaseConnection","db","collection","insertOne","insert","into","seedTableName","runSeeder","executor","pop","runSeeders","SeedCreateCommand","demandOption","Number","isNaN","now","dirNameIsDirectory","javascript","nameExtension","getFileNameExtension","nameWithoutExtension","template","SeedRunCommand"],"mappings":"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"}