{"version":3,"file":"index.mjs","sources":["../src/has.ts","../src/one-of.ts","../src/or-fail.ts","../src/read.ts","../src/utils/array.ts","../src/utils/bool.ts","../src/utils/float.ts","../src/utils/int.ts","../src/utils/number.ts","../src/read-array.ts","../src/read-bool.ts","../src/read-int.ts","../src/read-float.ts","../src/read-number.ts","../src/read-number-array.ts","../src/write.ts"],"sourcesContent":["import { env } from 'std-env';\n\nexport function has(key: string) : boolean {\n    if (Reflect.has(env, key)) {\n        return true;\n    }\n\n    /* istanbul ignore next */\n    return Reflect.has(globalThis.process?.env, key);\n}\n","type Unwrap<T> = T extends Array<infer Return> ? Return : T;\nexport function oneOf<T extends any[]>(input: T): Unwrap<T> | undefined {\n    for (let i = 0; i < input.length; i++) {\n        if (typeof input[i] !== 'undefined') {\n            return input[i];\n        }\n    }\n\n    return undefined;\n}\n","export function orFail<T>(output: T) : Exclude<T, undefined> {\n    if (typeof output === 'undefined') {\n        throw new Error('The environment variable could not be read.');\n    }\n\n    return output as Exclude<T, undefined>;\n}\n","import { env } from 'std-env';\n\nexport function read() : Record<string, string | undefined>;\nexport function read(key: string) : string | undefined;\nexport function read<T>(key: string, alt: T) : T | string;\nexport function read<T>(key?: string, alt?: T): any {\n    if (typeof key === 'undefined') {\n        const keys = Reflect.ownKeys(env) as string[];\n        const output : Record<string, string | undefined> = {};\n        for (let i = 0; i < keys.length; i++) {\n            output[keys[i]] = env[keys[i]];\n        }\n        return output;\n    }\n\n    if (Reflect.has(env, key)) {\n        return env[key];\n    }\n\n    /* istanbul ignore next */\n    if (Reflect.has(globalThis.process?.env, key)) {\n        return globalThis.process?.env[key];\n    }\n\n    return alt;\n}\n","export function toArray(\n    input: any,\n    separator : string = ',',\n) : string[] | undefined {\n    if (typeof input !== 'string') {\n        return undefined;\n    }\n\n    return input\n        .split(separator)\n        .map((el) => el.trim())\n        .filter(Boolean);\n}\n","export function toBool(value: any) : boolean | undefined {\n    switch (value) {\n        case true:\n        case 'true':\n        case 't':\n        case '1':\n            return true;\n        case false:\n        case 'false':\n        case 'f':\n        case '0':\n            return false;\n    }\n\n    return undefined;\n}\n","export function toFloat(value: any) : number | undefined {\n    const num = Number.parseFloat(value);\n    if (Number.isNaN(num) || Number.isNaN(value)) {\n        return undefined;\n    }\n\n    return num;\n}\n","export function toInt(value: any) : number | undefined {\n    const num = Number.parseInt(value, 10);\n    if (Number.isNaN(num)) {\n        return undefined;\n    }\n\n    return num;\n}\n","export function toNumber(value: any) : number | undefined {\n    const num = Number(value);\n    if (Number.isNaN(num)) {\n        return undefined;\n    }\n\n    return num;\n}\n","import { read } from './read';\nimport { toArray } from './utils';\n\nexport function readArray(key: string) : string[] | undefined;\nexport function readArray(key: string, alt: string[]) : string[];\nexport function readArray(key: string, alt?: string[]): any {\n    const value = read(key);\n    if (typeof value === 'undefined') {\n        return alt;\n    }\n\n    return toArray(value) ?? alt;\n}\n","import { read } from './read';\nimport { toBool } from './utils';\n\nexport function readBool(key: string) : boolean | undefined;\nexport function readBool<T>(key: string, alt: T) : T | boolean;\nexport function readBool<T>(key: string, alt?: T) : any {\n    const value = read(key) as any;\n    if (typeof value !== 'undefined') {\n        return toBool(value) ?? alt;\n    }\n\n    return alt;\n}\n","import { read } from './read';\nimport { toInt } from './utils';\n\nexport function readInt(key: string) : number | undefined;\nexport function readInt<T>(key: string, alt: T) : T | number;\nexport function readInt<T>(key: string, alt?: T) : any {\n    const value = read(key) as any;\n    if (typeof value !== 'undefined') {\n        return toInt(value) ?? alt;\n    }\n\n    return alt;\n}\n","import { read } from './read';\nimport { toFloat } from './utils';\n\nexport function readFloat(key: string) : number | undefined;\nexport function readFloat<T>(key: string, alt: T) : T | number;\nexport function readFloat<T>(key: string, alt?: T) : any {\n    const value = read(key) as any;\n    if (typeof value !== 'undefined') {\n        return toFloat(value) ?? alt;\n    }\n\n    return alt;\n}\n","import { read } from './read';\nimport { toNumber } from './utils';\n\nexport function readNumber(key: string) : number | undefined;\nexport function readNumber<T>(key: string, alt: T) : T | number;\nexport function readNumber<T>(key: string, alt?: T) : any {\n    const value = read(key) as any;\n    if (typeof value !== 'undefined') {\n        return toNumber(value) ?? alt;\n    }\n\n    return alt;\n}\n","import { readArray } from './read-array';\nimport { toNumber } from './utils';\n\nexport function readNumberArray(key: string) : number[] | undefined {\n    const value = readArray(key);\n    if (!value) {\n        return undefined;\n    }\n\n    const nums = value.map((el) => toNumber(el));\n\n    if (nums.some((el) => typeof el === 'undefined')) {\n        return undefined;\n    }\n\n    return nums as number[];\n}\n","import { env } from 'std-env';\n\nexport function write(key: string, value: string | undefined) {\n    if (typeof value === 'undefined') {\n        delete env[key];\n        return;\n    }\n\n    env[key] = value;\n}\n"],"names":["has","key","Reflect","env","globalThis","process","oneOf","input","i","length","undefined","orFail","output","Error","read","alt","keys","ownKeys","toArray","separator","split","map","el","trim","filter","Boolean","toBool","value","toFloat","num","Number","parseFloat","isNaN","toInt","parseInt","toNumber","readArray","readBool","readInt","readFloat","readNumber","readNumberArray","nums","some","write"],"mappings":"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"}